---
name: PowerDNS Infrastructure CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  ANSIBLE_HOST_KEY_CHECKING: False
  ANSIBLE_STDOUT_CALLBACK: yaml
  ANSIBLE_FORCE_COLOR: True

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint \
            molecule[docker] pytest-testinfra
          pip install jmespath netaddr

      - name: Lint YAML files
        run: |
          yamllint .
        continue-on-error: true

      - name: Lint Ansible playbooks
        run: |
          ansible-lint powerdns-playbook.yml
        continue-on-error: true

      - name: Validate Ansible syntax
        run: |
          ansible-playbook --syntax-check powerdns-playbook.yml

      - name: Validate inventory
        run: |
          ansible-inventory -i inventory/hosts.yml --list > /dev/null

      - name: Check for security issues
        run: |
          # Check for hardcoded passwords or secrets
          if grep -r "password.*=" . --include="*.yml" --include="*.yaml" \
            | grep -v "password.*{{" | grep -v "#"; then
            echo "WARNING: Potential hardcoded passwords found"
            exit 1
          fi

  molecule-test:
    name: Molecule Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    needs: lint-and-validate
    strategy:
      matrix:
        scenario: [default]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible molecule[docker] pytest-testinfra
          pip install docker

      - name: Run Molecule tests
        run: |
          cd tests
          molecule test -s ${{ matrix.scenario }}
        env:
          MOLECULE_NO_LOG: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for sensitive files
        run: |
          # Check for common sensitive files
          sensitive_files=(
            "*.pem"
            "*.key"
            "*.p12"
            "*.pfx"
            "*id_rsa*"
            "*id_dsa*"
            "*.env"
            ".env.*"
          )

          for pattern in "${sensitive_files[@]}"; do
            if find . -name "$pattern" -not -path "./.git/*" | grep -q .; then
              echo "WARNING: Sensitive files found matching pattern: $pattern"
              find . -name "$pattern" -not -path "./.git/*"
            fi
          done

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-validate, molecule-test, security-scan]
    if: >-
      github.ref == 'refs/heads/develop' ||
      (github.event_name == 'workflow_dispatch' &&
      inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible jmespath netaddr

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Create vault password file
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
          chmod 600 .vault_pass

      - name: Deploy to staging
        run: |
          ansible-playbook -i inventory/staging.yml powerdns-playbook.yml \
            --vault-password-file .vault_pass \
            --extra-vars "environment=staging" \
            --diff
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Run post-deployment tests
        run: |
          # Test DNS resolution
          dig @${{ secrets.STAGING_HOST }} google.com

          # Test PowerDNS API if enabled
            if [ -n "${{ secrets.POWERDNS_API_KEY }}" ]; then
              curl -H "X-API-Key: ${{ secrets.POWERDNS_API_KEY }}" \
                http://${{ secrets.STAGING_HOST }}:8081/api/v1/servers
            fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa .vault_pass

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-validate, molecule-test, security-scan]
    if: >-
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' &&
      inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible jmespath netaddr

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          for host in ${{ secrets.PRODUCTION_HOSTS }}; do
            ssh-keyscan -H $host >> ~/.ssh/known_hosts
          done

      - name: Create vault password file
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
          chmod 600 .vault_pass

      - name: Pre-deployment backup
        run: |
          ansible-playbook -i inventory/production.yml backup-playbook.yml \
            --vault-password-file .vault_pass \
            --extra-vars "backup_type=pre_deployment"

      - name: Deploy to production
        run: |
          ansible-playbook -i inventory/production.yml powerdns-playbook.yml \
            --vault-password-file .vault_pass \
            --extra-vars "environment=production" \
            --diff \
            --check-mode

          # If check mode passes, run the actual deployment
          if [ $? -eq 0 ]; then
            ansible-playbook -i inventory/production.yml powerdns-playbook.yml \
              --vault-password-file .vault_pass \
              --extra-vars "environment=production" \
              --diff
          else
            echo "Check mode failed, aborting deployment"
            exit 1
          fi
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Run comprehensive post-deployment tests
        run: |
          # Test DNS resolution from multiple sources
          for host in ${{ secrets.PRODUCTION_HOSTS }}; do
            echo "Testing DNS on $host"
            dig @$host google.com
            dig @$host example.com

            # Test DNSSEC if enabled
            dig @$host +dnssec google.com
          done

          # Test PowerDNS API
          if [ -n "${{ secrets.POWERDNS_API_KEY }}" ]; then
            for host in ${{ secrets.PRODUCTION_HOSTS }}; do
              curl -f -H "X-API-Key: ${{ secrets.POWERDNS_API_KEY }}" \
                   http://$host:8081/api/v1/servers
            done
          fi

          # Test HAProxy if enabled
          if [ -n "${{ secrets.HAPROXY_STATS_URL }}" ]; then
            curl -f ${{ secrets.HAPROXY_STATS_URL }}
          fi

      - name: Post-deployment backup
        if: success()
        run: |
          ansible-playbook -i inventory/production.yml backup-playbook.yml \
            --vault-password-file .vault_pass \
            --extra-vars "backup_type=post_deployment"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback"
          ansible-playbook -i inventory/production.yml rollback-playbook.yml \
            --vault-password-file .vault_pass

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa .vault_pass

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'PowerDNS deployment completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'PowerDNS deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release on production deployment
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: PowerDNS Release v${{ github.run_number }}
          body: |
            Automated release from successful production deployment.

            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}

            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
