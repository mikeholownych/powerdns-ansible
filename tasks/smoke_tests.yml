---
# Smoke Tests for PowerDNS Infrastructure

- name: Display smoke test start
  ansible.builtin.debug:
    msg: "=== Running PowerDNS Smoke Tests ==="

- name: Test PowerDNS service status
  ansible.builtin.systemd:
    name: pdns
  register: pdns_service_status
  failed_when: pdns_service_status.status.ActiveState != 'active'

- name: Test MySQL service status
  ansible.builtin.systemd:
    name: "{{ mysql_service_name }}"
  register: mysql_service_status
  failed_when: mysql_service_status.status.ActiveState != 'active'
  when: "'mysql' in dns_features"

- name: Test basic DNS resolution
  ansible.builtin.command: dig @{{ ansible_default_ipv4.address }} {{ primary_domains[0] | default('localhost') }} SOA +short
  register: dns_resolution_test
  failed_when: dns_resolution_test.rc != 0
  changed_when: false

- name: Test PowerDNS API connectivity
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1/servers"
    method: GET
    headers:
      X-API-Key: "{{ powerdns_api_key }}"
    status_code: 200
  register: api_test
  when: "'api' in dns_features"

- name: Test database connectivity
  community.mysql.mysql_query:
    login_user: "{{ powerdns_db_user }}"
    login_password: "{{ powerdns_db_password }}"
    login_host: "{{ powerdns_db_host }}"
    login_db: "{{ powerdns_db_name }}"
    query: "SELECT COUNT(*) as domain_count FROM domains"
  register: db_connectivity_test
  when: "'mysql' in dns_features"

- name: Test zone count
  community.mysql.mysql_query:
    login_user: "{{ powerdns_db_user }}"
    login_password: "{{ powerdns_db_password }}"
    login_host: "{{ powerdns_db_host }}"
    login_db: "{{ powerdns_db_name }}"
    query: "SELECT COUNT(*) as zone_count FROM domains"
  register: zone_count_test
  when: "'mysql' in dns_features"

- name: Test DNSSEC functionality
  ansible.builtin.command: pdnsutil show-zone {{ primary_domains[0] | default('example.com') }}
  register: dnssec_test
  failed_when: false
  changed_when: false
  when: "'dnssec' in dns_features"

- name: Test DNSdist functionality
  ansible.builtin.command: dig @{{ ansible_default_ipv4.address }} google.com +short
  register: dnsdist_test
  failed_when: dnsdist_test.rc != 0
  changed_when: false
  when:
    - "'dnsdist' in dns_features"
    - server_role == 'loadbalancer'

- name: Test HAProxy stats page
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}/stats"
    method: GET
    status_code: 200
  register: haproxy_stats_test
  when:
    - "'haproxy_servers' in group_names"
    - server_role == 'loadbalancer'

- name: Test Keepalived VIP
  ansible.builtin.command: ip addr show
  register: vip_test
  changed_when: false
  when: keepalived_enabled | default(false)

- name: Test Prometheus metrics endpoint
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ prometheus_port | default(9090) }}/metrics"
    method: GET
    status_code: 200
  register: prometheus_test
  when: "'monitoring' in dns_features"

- name: Test PowerDNS metrics
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ powerdns_exporter_port | default(9120) }}/metrics"
    method: GET
    status_code: 200
  register: powerdns_metrics_test
  when: "'monitoring' in dns_features"

- name: Test log file creation
  ansible.builtin.stat:
    path: "{{ item }}"
  register: log_files_test
  loop:
    - /var/log/powerdns/pdns.log
    - /var/log/mysql/error.log
    - /var/log/prometheus/prometheus.log
  failed_when: not log_files_test.stat.exists
  when: "'logging' in dns_features"

- name: Test configuration file syntax
  ansible.builtin.command: pdns_server --config-check
  register: config_syntax_test
  failed_when: config_syntax_test.rc != 0
  changed_when: false

- name: Test backup functionality
  ansible.builtin.command: /usr/local/bin/backup-powerdns.sh --test
  register: backup_test
  failed_when: backup_test.rc != 0
  changed_when: false
  when: "'backup' in dns_features"

- name: Test self-healing functionality
  ansible.builtin.command: /opt/self-healing/scripts/service-health-monitor.sh --test
  register: self_healing_test
  failed_when: self_healing_test.rc != 0
  changed_when: false
  when: "'self_healing' in dns_features"

- name: Compile smoke test results
  ansible.builtin.set_fact:
    smoke_test_results:
      powerdns_service: "{{ 'PASS' if pdns_service_status.status.ActiveState == 'active' else 'FAIL' }}"
      mysql_service: "{{ 'PASS' if mysql_service_status.status.ActiveState == 'active' else 'FAIL' if 'mysql' in dns_features else 'SKIP' }}"
      dns_resolution: "{{ 'PASS' if dns_resolution_test.rc == 0 else 'FAIL' }}"
      api_connectivity: "{{ 'PASS' if api_test.status == 200 else 'FAIL' if 'api' in dns_features else 'SKIP' }}"
      database_connectivity: "{{ 'PASS' if db_connectivity_test is succeeded else 'FAIL' if 'mysql' in dns_features else 'SKIP' }}"
      config_syntax: "{{ 'PASS' if config_syntax_test.rc == 0 else 'FAIL' }}"
      backup_functionality: "{{ 'PASS' if backup_test.rc == 0 else 'FAIL' if 'backup' in dns_features else 'SKIP' }}"
      monitoring: "{{ 'PASS' if prometheus_test.status == 200 else 'FAIL' if 'monitoring' in dns_features else 'SKIP' }}"

- name: Display smoke test results
  ansible.builtin.debug:
    msg:
      - "=== Smoke Test Results ==="
      - "PowerDNS Service: {{ smoke_test_results.powerdns_service }}"
      - "MySQL Service: {{ smoke_test_results.mysql_service }}"
      - "DNS Resolution: {{ smoke_test_results.dns_resolution }}"
      - "API Connectivity: {{ smoke_test_results.api_connectivity }}"
      - "Database Connectivity: {{ smoke_test_results.database_connectivity }}"
      - "Configuration Syntax: {{ smoke_test_results.config_syntax }}"
      - "Backup Functionality: {{ smoke_test_results.backup_functionality }}"
      - "Monitoring: {{ smoke_test_results.monitoring }}"

- name: Fail if any critical smoke tests failed
  ansible.builtin.fail:
    msg: "Critical smoke tests failed. Check the results above."
  when: >
    smoke_test_results.powerdns_service == 'FAIL' or
    smoke_test_results.dns_resolution == 'FAIL' or
    smoke_test_results.config_syntax == 'FAIL' or
    (smoke_test_results.mysql_service == 'FAIL' and 'mysql' in dns_features) or
    (smoke_test_results.api_connectivity == 'FAIL' and 'api' in dns_features)

- name: Record smoke test results
  ansible.builtin.copy:
    dest: /var/lib/powerdns-state/reports/smoke-test-results.json
    content: |
      {
        "timestamp": "{{ ansible_date_time.iso8601 }}",
        "hostname": "{{ inventory_hostname }}",
        "operation_mode": "{{ operation_mode }}",
        "test_results": {{ smoke_test_results | to_json }},
        "overall_status": "{{ 'PASS' if smoke_test_results.powerdns_service == 'PASS' and smoke_test_results.dns_resolution == 'PASS' else 'FAIL' }}"
      }
    mode: '0644'
