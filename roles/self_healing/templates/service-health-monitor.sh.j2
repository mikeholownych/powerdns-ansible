#!/bin/bash
# Service Health Monitor and Auto-Recovery Script
# Generated by Ansible

set -euo pipefail

# Configuration
LOG_FILE="/var/log/self-healing/service-health.log"
NOTIFICATION_SCRIPT="/opt/self-healing/scripts/self-healing-notify.sh"
RECOVERY_SCRIPT="/opt/self-healing/scripts/auto-recovery.sh"
TEST_MODE=${1:-""}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Send notification
send_notification() {
    local service=$1
    local status=$2
    local action=$3
    
    if [ -x "$NOTIFICATION_SCRIPT" ]; then
        "$NOTIFICATION_SCRIPT" "$service" "$status" "$action"
    fi
}

# Check PowerDNS service
check_powerdns() {
    local service_name="{{ powerdns_service_name }}"
    local recovery_attempted=false
    
    log_message "INFO" "Checking PowerDNS service status"
    
    # Check if service is running
    if ! systemctl is-active --quiet "$service_name"; then
        log_message "ERROR" "PowerDNS service is not running"
        print_color $RED "✗ PowerDNS Service: STOPPED"
        
        if [ "$TEST_MODE" != "--test" ]; then
            log_message "INFO" "Attempting to restart PowerDNS service"
            if systemctl restart "$service_name"; then
                log_message "INFO" "PowerDNS service restarted successfully"
                send_notification "PowerDNS" "RECOVERED" "Service restarted"
                recovery_attempted=true
            else
                log_message "ERROR" "Failed to restart PowerDNS service"
                send_notification "PowerDNS" "FAILED" "Service restart failed"
                return 1
            fi
        fi
    else
        print_color $GREEN "✓ PowerDNS Service: RUNNING"
    fi
    
    # Check DNS resolution
    if ! dig @{{ ansible_default_ipv4.address }} localhost +time=5 >/dev/null 2>&1; then
        log_message "ERROR" "PowerDNS is not responding to DNS queries"
        print_color $RED "✗ PowerDNS DNS Resolution: FAILED"
        
        if [ "$TEST_MODE" != "--test" ] && [ "$recovery_attempted" = false ]; then
            log_message "INFO" "Attempting to restart PowerDNS due to DNS resolution failure"
            if systemctl restart "$service_name"; then
                log_message "INFO" "PowerDNS service restarted due to DNS issues"
                send_notification "PowerDNS" "RECOVERED" "Service restarted due to DNS failure"
            else
                log_message "ERROR" "Failed to restart PowerDNS service"
                send_notification "PowerDNS" "FAILED" "Service restart failed after DNS failure"
                return 1
            fi
        fi
    else
        print_color $GREEN "✓ PowerDNS DNS Resolution: WORKING"
    fi
    
    # Check API if enabled
    {% if powerdns_api_readonly is defined %}
    if ! curl -s -f -H "X-API-Key: {{ powerdns_api_key }}" "http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1/servers" >/dev/null; then
        log_message "WARNING" "PowerDNS API is not responding"
        print_color $YELLOW "⚠ PowerDNS API: NOT RESPONDING"
    else
        print_color $GREEN "✓ PowerDNS API: RESPONDING"
    fi
    {% endif %}
    
    return 0
}

# Check MySQL service
check_mysql() {
    local service_name="{{ mysql_service_name }}"
    local recovery_attempted=false
    
    log_message "INFO" "Checking MySQL service status"
    
    # Check if service is running
    if ! systemctl is-active --quiet "$service_name"; then
        log_message "ERROR" "MySQL service is not running"
        print_color $RED "✗ MySQL Service: STOPPED"
        
        if [ "$TEST_MODE" != "--test" ]; then
            log_message "INFO" "Attempting to restart MySQL service"
            if systemctl restart "$service_name"; then
                log_message "INFO" "MySQL service restarted successfully"
                send_notification "MySQL" "RECOVERED" "Service restarted"
                recovery_attempted=true
            else
                log_message "ERROR" "Failed to restart MySQL service"
                send_notification "MySQL" "FAILED" "Service restart failed"
                return 1
            fi
        fi
    else
        print_color $GREEN "✓ MySQL Service: RUNNING"
    fi
    
    # Check database connectivity
    if ! mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SELECT 1;" >/dev/null 2>&1; then
        log_message "ERROR" "MySQL database is not accessible"
        print_color $RED "✗ MySQL Database: NOT ACCESSIBLE"
        
        if [ "$TEST_MODE" != "--test" ] && [ "$recovery_attempted" = false ]; then
            log_message "INFO" "Attempting to restart MySQL due to connectivity issues"
            if systemctl restart "$service_name"; then
                log_message "INFO" "MySQL service restarted due to connectivity issues"
                send_notification "MySQL" "RECOVERED" "Service restarted due to connectivity failure"
            else
                log_message "ERROR" "Failed to restart MySQL service"
                send_notification "MySQL" "FAILED" "Service restart failed after connectivity failure"
                return 1
            fi
        fi
    else
        print_color $GREEN "✓ MySQL Database: ACCESSIBLE"
    fi
    
    # Check replication status if enabled
    {% if mysql_replication_enabled | default(false) and server_role == 'secondary' %}
    local replication_status=$(mysql -u root -p{{ mysql_root_password | default('') }} -e "SHOW SLAVE STATUS\G" 2>/dev/null | grep "Slave_SQL_Running" | awk '{print $2}')
    if [ "$replication_status" != "Yes" ]; then
        log_message "WARNING" "MySQL replication is not running properly"
        print_color $YELLOW "⚠ MySQL Replication: ISSUES DETECTED"
        send_notification "MySQL" "WARNING" "Replication issues detected"
    else
        print_color $GREEN "✓ MySQL Replication: RUNNING"
    fi
    {% endif %}
    
    return 0
}

# Check HAProxy service
check_haproxy() {
    {% if haproxy_enabled | default(false) %}
    local service_name="haproxy"
    
    log_message "INFO" "Checking HAProxy service status"
    
    if ! systemctl is-active --quiet "$service_name"; then
        log_message "ERROR" "HAProxy service is not running"
        print_color $RED "✗ HAProxy Service: STOPPED"
        
        if [ "$TEST_MODE" != "--test" ]; then
            log_message "INFO" "Attempting to restart HAProxy service"
            if systemctl restart "$service_name"; then
                log_message "INFO" "HAProxy service restarted successfully"
                send_notification "HAProxy" "RECOVERED" "Service restarted"
            else
                log_message "ERROR" "Failed to restart HAProxy service"
                send_notification "HAProxy" "FAILED" "Service restart failed"
                return 1
            fi
        fi
    else
        print_color $GREEN "✓ HAProxy Service: RUNNING"
    fi
    
    # Check HAProxy stats page
    if ! curl -s -f "http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}/stats" >/dev/null; then
        log_message "WARNING" "HAProxy stats page is not accessible"
        print_color $YELLOW "⚠ HAProxy Stats: NOT ACCESSIBLE"
    else
        print_color $GREEN "✓ HAProxy Stats: ACCESSIBLE"
    fi
    {% endif %}
    
    return 0
}

# Check Keepalived service
check_keepalived() {
    {% if keepalived_enabled | default(false) %}
    local service_name="keepalived"
    
    log_message "INFO" "Checking Keepalived service status"
    
    if ! systemctl is-active --quiet "$service_name"; then
        log_message "ERROR" "Keepalived service is not running"
        print_color $RED "✗ Keepalived Service: STOPPED"
        
        if [ "$TEST_MODE" != "--test" ]; then
            log_message "INFO" "Attempting to restart Keepalived service"
            if systemctl restart "$service_name"; then
                log_message "INFO" "Keepalived service restarted successfully"
                send_notification "Keepalived" "RECOVERED" "Service restarted"
            else
                log_message "ERROR" "Failed to restart Keepalived service"
                send_notification "Keepalived" "FAILED" "Service restart failed"
                return 1
            fi
        fi
    else
        print_color $GREEN "✓ Keepalived Service: RUNNING"
    fi
    
    # Check VIP status
    if ip addr show | grep -q "{{ keepalived_virtual_ip | default('192.168.1.100') }}"; then
        print_color $GREEN "✓ Virtual IP: ASSIGNED"
        log_message "INFO" "Virtual IP is assigned to this server"
    else
        print_color $YELLOW "⚠ Virtual IP: NOT ASSIGNED (may be on backup server)"
        log_message "INFO" "Virtual IP is not assigned to this server"
    fi
    {% endif %}
    
    return 0
}

# Check system resources
check_system_resources() {
    log_message "INFO" "Checking system resources"
    
    # Check disk usage
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | cut -d'%' -f1)
    if [ "$disk_usage" -gt 90 ]; then
        log_message "ERROR" "Disk usage is critically high: ${disk_usage}%"
        print_color $RED "✗ Disk Usage: ${disk_usage}% (CRITICAL)"
        send_notification "System" "CRITICAL" "Disk usage at ${disk_usage}%"
    elif [ "$disk_usage" -gt 80 ]; then
        log_message "WARNING" "Disk usage is high: ${disk_usage}%"
        print_color $YELLOW "⚠ Disk Usage: ${disk_usage}% (HIGH)"
        send_notification "System" "WARNING" "Disk usage at ${disk_usage}%"
    else
        print_color $GREEN "✓ Disk Usage: ${disk_usage}% (OK)"
    fi
    
    # Check memory usage
    local mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [ "$mem_usage" -gt 90 ]; then
        log_message "ERROR" "Memory usage is critically high: ${mem_usage}%"
        print_color $RED "✗ Memory Usage: ${mem_usage}% (CRITICAL)"
        send_notification "System" "CRITICAL" "Memory usage at ${mem_usage}%"
    elif [ "$mem_usage" -gt 80 ]; then
        log_message "WARNING" "Memory usage is high: ${mem_usage}%"
        print_color $YELLOW "⚠ Memory Usage: ${mem_usage}% (HIGH)"
    else
        print_color $GREEN "✓ Memory Usage: ${mem_usage}% (OK)"
    fi
    
    # Check load average
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | cut -d',' -f1)
    local cpu_count=$(nproc)
    local load_threshold=$(echo "$cpu_count * 2" | bc)
    
    if (( $(echo "$load_avg > $load_threshold" | bc -l) )); then
        log_message "WARNING" "Load average is high: $load_avg (threshold: $load_threshold)"
        print_color $YELLOW "⚠ Load Average: $load_avg (HIGH)"
        send_notification "System" "WARNING" "Load average at $load_avg"
    else
        print_color $GREEN "✓ Load Average: $load_avg (OK)"
    fi
}

# Main function
main() {
    local overall_status=0
    
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    
    if [ "$TEST_MODE" = "--test" ]; then
        print_color $YELLOW "=== RUNNING IN TEST MODE ==="
        log_message "INFO" "Service health monitor running in test mode"
    else
        log_message "INFO" "Starting service health monitoring"
    fi
    
    print_color $YELLOW "=== Service Health Monitor ==="
    
    # Check all services
    check_powerdns || overall_status=1
    check_mysql || overall_status=1
    check_haproxy || overall_status=1
    check_keepalived || overall_status=1
    check_system_resources || overall_status=1
    
    # Final status
    if [ $overall_status -eq 0 ]; then
        print_color $GREEN "=== All Services: HEALTHY ==="
        log_message "INFO" "All services are healthy"
    else
        print_color $RED "=== Some Services: UNHEALTHY ==="
        log_message "ERROR" "Some services are unhealthy"
        
        if [ "$TEST_MODE" != "--test" ]; then
            # Run comprehensive recovery if available
            if [ -x "$RECOVERY_SCRIPT" ]; then
                log_message "INFO" "Running comprehensive recovery script"
                "$RECOVERY_SCRIPT"
            fi
        fi
    fi
    
    log_message "INFO" "Service health monitoring completed"
    exit $overall_status
}

# Run main function
main "$@"
