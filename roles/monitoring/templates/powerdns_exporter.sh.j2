#!/bin/bash
# PowerDNS Prometheus Exporter Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TEXTFILE_DIR="/var/lib/prometheus/textfile_collector"
METRICS_FILE="$TEXTFILE_DIR/powerdns.prom"
TEMP_FILE="$TEXTFILE_DIR/powerdns.prom.tmp"

# Ensure directory exists
mkdir -p "$TEXTFILE_DIR"

# Function to write metric
write_metric() {
    local name="$1"
    local value="$2"
    local help="$3"
    local type="${4:-gauge}"
    
    echo "# HELP $name $help" >> "$TEMP_FILE"
    echo "# TYPE $name $type" >> "$TEMP_FILE"
    echo "$name $value" >> "$TEMP_FILE"
}

# Start with empty temp file
> "$TEMP_FILE"

# PowerDNS service status
if systemctl is-active --quiet {{ powerdns_service_name }}; then
    write_metric "powerdns_service_up" "1" "PowerDNS service is running"
else
    write_metric "powerdns_service_up" "0" "PowerDNS service is running"
fi

# Database connection status
if mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SELECT 1;" >/dev/null 2>&1; then
    write_metric "powerdns_database_up" "1" "PowerDNS database is accessible"
else
    write_metric "powerdns_database_up" "0" "PowerDNS database is accessible"
fi

# DNS resolution test
if dig @{{ ansible_default_ipv4.address }} localhost +time=5 >/dev/null 2>&1; then
    write_metric "powerdns_dns_resolution_up" "1" "DNS resolution is working"
    
    # Measure response time
    response_time=$(dig @{{ ansible_default_ipv4.address }} localhost +stats | grep "Query time:" | awk '{print $4}')
    if [ -n "$response_time" ]; then
        write_metric "powerdns_dns_response_time_ms" "$response_time" "DNS response time in milliseconds"
    fi
else
    write_metric "powerdns_dns_resolution_up" "0" "DNS resolution is working"
fi

# Zone count
zone_count=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -D {{ powerdns_db_name }} -se "SELECT COUNT(*) FROM domains;" 2>/dev/null)
if [ -n "$zone_count" ]; then
    write_metric "powerdns_zones_total" "$zone_count" "Total number of DNS zones"
fi

# Record count
record_count=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -D {{ powerdns_db_name }} -se "SELECT COUNT(*) FROM records;" 2>/dev/null)
if [ -n "$record_count" ]; then
    write_metric "powerdns_records_total" "$record_count" "Total number of DNS records"
fi

# PowerDNS statistics (if available)
if command -v pdns_control >/dev/null 2>&1; then
    # Get PowerDNS statistics
    stats=$(pdns_control show '*' 2>/dev/null)
    
    if [ -n "$stats" ]; then
        # Parse common statistics
        while IFS='=' read -r metric value; do
            case "$metric" in
                "udp-queries")
                    write_metric "powerdns_udp_queries_total" "$value" "Total UDP queries" "counter"
                    ;;
                "tcp-queries")
                    write_metric "powerdns_tcp_queries_total" "$value" "Total TCP queries" "counter"
                    ;;
                "servfail-answers")
                    write_metric "powerdns_servfail_answers_total" "$value" "Total SERVFAIL answers" "counter"
                    ;;
                "noerror-answers")
                    write_metric "powerdns_noerror_answers_total" "$value" "Total NOERROR answers" "counter"
                    ;;
                "nxdomain-answers")
                    write_metric "powerdns_nxdomain_answers_total" "$value" "Total NXDOMAIN answers" "counter"
                    ;;
                "recursion-unanswered")
                    write_metric "powerdns_recursion_unanswered_total" "$value" "Total unanswered recursion queries" "counter"
                    ;;
                "cache-hits")
                    write_metric "powerdns_cache_hits_total" "$value" "Total cache hits" "counter"
                    ;;
                "cache-misses")
                    write_metric "powerdns_cache_misses_total" "$value" "Total cache misses" "counter"
                    ;;
                "qsize-q")
                    write_metric "powerdns_queue_size" "$value" "Current queue size"
                    ;;
            esac
        done <<< "$stats"
    fi
fi

# System resource metrics specific to PowerDNS
if pgrep -f pdns_server >/dev/null; then
    # PowerDNS process memory usage
    pdns_memory=$(ps -o rss= -p $(pgrep -f pdns_server) | awk '{sum+=$1} END {print sum*1024}')
    if [ -n "$pdns_memory" ]; then
        write_metric "powerdns_process_memory_bytes" "$pdns_memory" "PowerDNS process memory usage in bytes"
    fi
    
    # PowerDNS process CPU usage
    pdns_cpu=$(ps -o pcpu= -p $(pgrep -f pdns_server) | awk '{sum+=$1} END {print sum}')
    if [ -n "$pdns_cpu" ]; then
        write_metric "powerdns_process_cpu_percent" "$pdns_cpu" "PowerDNS process CPU usage percentage"
    fi
fi

# Network connections on port 53
dns_connections=$(netstat -an | grep ":53 " | wc -l)
write_metric "powerdns_dns_connections" "$dns_connections" "Number of active DNS connections"

{% if powerdns_webserver_port is defined %}
# API availability
if nc -z -w5 {{ ansible_default_ipv4.address }} {{ powerdns_webserver_port }} 2>/dev/null; then
    write_metric "powerdns_api_up" "1" "PowerDNS API is available"
else
    write_metric "powerdns_api_up" "0" "PowerDNS API is available"
fi
{% endif %}

# Database connection count
db_connections=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SHOW STATUS LIKE 'Threads_connected';" 2>/dev/null | tail -1 | awk '{print $2}')
if [ -n "$db_connections" ]; then
    write_metric "powerdns_database_connections" "$db_connections" "Number of database connections"
fi

# Server role metric
case "{{ server_role }}" in
    "primary")
        write_metric "powerdns_server_role" "1" "Server role (1=primary, 0=secondary)"
        ;;
    "secondary")
        write_metric "powerdns_server_role" "0" "Server role (1=primary, 0=secondary)"
        ;;
esac

# Zone transfer status for secondary servers
{% if server_role == 'secondary' %}
failed_transfers=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -D {{ powerdns_db_name }} -se "SELECT COUNT(*) FROM domains WHERE type='SLAVE' AND last_check IS NULL;" 2>/dev/null)
if [ -n "$failed_transfers" ]; then
    write_metric "powerdns_failed_zone_transfers" "$failed_transfers" "Number of failed zone transfers"
fi
{% endif %}

# Backup status
if [ -d "{{ powerdns_backup_dir }}" ]; then
    recent_backups=$(find {{ powerdns_backup_dir }} -name "powerdns_backup_*" -mtime -1 | wc -l)
    write_metric "powerdns_recent_backups" "$recent_backups" "Number of backups in last 24 hours"
fi

# Move temp file to final location atomically
mv "$TEMP_FILE" "$METRICS_FILE"

# Set proper permissions
chown prometheus:prometheus "$METRICS_FILE"
chmod 644 "$METRICS_FILE"
