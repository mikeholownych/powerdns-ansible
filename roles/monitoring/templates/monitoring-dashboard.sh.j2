#!/bin/bash
# PowerDNS Monitoring Dashboard
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to get status icon
get_status_icon() {
    local status=$1
    case $status in
        "active"|"running"|"up"|"ok"|"success")
            echo "✅"
            ;;
        "inactive"|"stopped"|"down"|"failed"|"error")
            echo "❌"
            ;;
        "warning"|"degraded")
            echo "⚠️"
            ;;
        *)
            echo "❓"
            ;;
    esac
}

# Function to display header
display_header() {
    clear
    print_color $CYAN "╔══════════════════════════════════════════════════════════════╗"
    print_color $CYAN "║                    PowerDNS Monitoring Dashboard             ║"
    print_color $CYAN "╠══════════════════════════════════════════════════════════════╣"
    print_color $CYAN "║ Server: $(hostname -f | cut -c1-45)$(printf '%*s' $((45-${#$(hostname -f)})) '')║"
    print_color $CYAN "║ Role: {{ server_role | upper }}$(printf '%*s' $((55-${#server_role})) '')║"
    print_color $CYAN "║ IP: {{ ansible_default_ipv4.address }}$(printf '%*s' $((51-${#ansible_default_ipv4.address})) '')║"
    print_color $CYAN "║ Updated: $(date '+%Y-%m-%d %H:%M:%S')$(printf '%*s' 25 '')║"
    print_color $CYAN "╚══════════════════════════════════════════════════════════════╝"
    echo
}

# Function to display service status
display_service_status() {
    print_color $BLUE "🔧 SERVICE STATUS"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # PowerDNS Service
    local pdns_status
    if systemctl is-active --quiet {{ powerdns_service_name }}; then
        pdns_status="active"
        print_color $GREEN "$(get_status_icon $pdns_status) PowerDNS Service: RUNNING"
    else
        pdns_status="inactive"
        print_color $RED "$(get_status_icon $pdns_status) PowerDNS Service: STOPPED"
    fi
    
    # MySQL Service
    local mysql_status
    if systemctl is-active --quiet {{ mysql_service_name }}; then
        mysql_status="active"
        print_color $GREEN "$(get_status_icon $mysql_status) MySQL Service: RUNNING"
    else
        mysql_status="inactive"
        print_color $RED "$(get_status_icon $mysql_status) MySQL Service: STOPPED"
    fi
    
    # Firewall Status
    local fw_status="unknown"
    if command -v ufw >/dev/null 2>&1; then
        if ufw status | grep -q "Status: active"; then
            fw_status="active"
            print_color $GREEN "$(get_status_icon $fw_status) Firewall (UFW): ACTIVE"
        else
            fw_status="inactive"
            print_color $YELLOW "$(get_status_icon $fw_status) Firewall (UFW): INACTIVE"
        fi
    elif command -v firewall-cmd >/dev/null 2>&1; then
        if firewall-cmd --state >/dev/null 2>&1; then
            fw_status="active"
            print_color $GREEN "$(get_status_icon $fw_status) Firewall (firewalld): ACTIVE"
        else
            fw_status="inactive"
            print_color $YELLOW "$(get_status_icon $fw_status) Firewall (firewalld): INACTIVE"
        fi
    fi
    
    echo
}

# Function to display system resources
display_system_resources() {
    print_color $BLUE "📊 SYSTEM RESOURCES"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # CPU Usage
    local cpu_usage
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | cut -d',' -f1)
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        print_color $RED "🔥 CPU Usage: ${cpu_usage}%"
    elif (( $(echo "$cpu_usage > 60" | bc -l) )); then
        print_color $YELLOW "⚡ CPU Usage: ${cpu_usage}%"
    else
        print_color $GREEN "💚 CPU Usage: ${cpu_usage}%"
    fi
    
    # Memory Usage
    local mem_info
    mem_info=$(free -h | grep "Mem:")
    local mem_used
    local mem_total
    local mem_percent
    mem_used=$(echo "$mem_info" | awk '{print $3}')
    mem_total=$(echo "$mem_info" | awk '{print $2}')
    mem_percent=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    
    if [ "$mem_percent" -gt 80 ]; then
        print_color $RED "🔥 Memory: ${mem_used}/${mem_total} (${mem_percent}%)"
    elif [ "$mem_percent" -gt 60 ]; then
        print_color $YELLOW "⚡ Memory: ${mem_used}/${mem_total} (${mem_percent}%)"
    else
        print_color $GREEN "💚 Memory: ${mem_used}/${mem_total} (${mem_percent}%)"
    fi
    
    # Disk Usage
    local disk_info
    disk_info=$(df -h /etc/powerdns | tail -1)
    local disk_used
    local disk_total
    local disk_percent
    disk_used=$(echo "$disk_info" | awk '{print $3}')
    disk_total=$(echo "$disk_info" | awk '{print $2}')
    disk_percent=$(echo "$disk_info" | awk '{print $5}' | cut -d'%' -f1)
    
    if [ "$disk_percent" -gt 90 ]; then
        print_color $RED "🔥 Disk: ${disk_used}/${disk_total} (${disk_percent}%)"
    elif [ "$disk_percent" -gt 75 ]; then
        print_color $YELLOW "⚡ Disk: ${disk_used}/${disk_total} (${disk_percent}%)"
    else
        print_color $GREEN "💚 Disk: ${disk_used}/${disk_total} (${disk_percent}%)"
    fi
    
    # Load Average
    local load_avg
    load_avg=$(uptime | awk -F'load average:' '{print $2}')
    print_color $CYAN "📈 Load Average:${load_avg}"
    
    # Uptime
    local uptime_info
    uptime_info=$(uptime -p)
    print_color $CYAN "⏰ Uptime: ${uptime_info}"
    
    echo
}

# Function to display DNS status
display_dns_status() {
    print_color $BLUE "🌐 DNS STATUS"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # DNS Resolution Test
    if dig @{{ ansible_default_ipv4.address }} localhost +time=5 >/dev/null 2>&1; then
        print_color $GREEN "$(get_status_icon "success") DNS Resolution: WORKING"
    else
        print_color $RED "$(get_status_icon "failed") DNS Resolution: FAILED"
    fi
    
    # Port Status
    if nc -z -w5 {{ ansible_default_ipv4.address }} 53 2>/dev/null; then
        print_color $GREEN "$(get_status_icon "success") DNS Port 53: OPEN"
    else
        print_color $RED "$(get_status_icon "failed") DNS Port 53: CLOSED"
    fi
    
    {% if powerdns_webserver_port is defined %}
    # API Status
    if nc -z -w5 {{ ansible_default_ipv4.address }} {{ powerdns_webserver_port }} 2>/dev/null; then
        print_color $GREEN "$(get_status_icon "success") API Port {{ powerdns_webserver_port }}: OPEN"
    else
        print_color $RED "$(get_status_icon "failed") API Port {{ powerdns_webserver_port }}: CLOSED"
    fi
    {% endif %}
    
    # Database Connection
    if mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SELECT 1;" >/dev/null 2>&1; then
        print_color $GREEN "$(get_status_icon "success") Database Connection: OK"
        
        # Zone Count
        local zone_count
        zone_count=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -D {{ powerdns_db_name }} -se "SELECT COUNT(*) FROM domains;" 2>/dev/null)
        print_color $CYAN "📋 Total Zones: ${zone_count:-0}"
    else
        print_color $RED "$(get_status_icon "failed") Database Connection: FAILED"
    fi
    
    echo
}

# Function to display DNS statistics
display_dns_statistics() {
    if command -v pdns_control >/dev/null 2>&1; then
        print_color $BLUE "📈 DNS STATISTICS"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        local stats
        stats=$(pdns_control show '*' 2>/dev/null | grep -E "(udp-queries|tcp-queries|servfail-answers|noerror-answers|recursion-unanswered)" | head -10)
        
        if [ -n "$stats" ]; then
            echo "$stats" | while read -r line; do
                local metric
                local value
                metric=$(echo "$line" | cut -d'=' -f1)
                value=$(echo "$line" | cut -d'=' -f2)
                printf "%-25s: %s\n" "$metric" "$value"
            done
        else
            print_color $YELLOW "⚠️  Statistics not available"
        fi
        
        echo
    fi
}

# Function to display recent logs
display_recent_logs() {
    print_color $BLUE "📝 RECENT ACTIVITY"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # PowerDNS logs
    if journalctl -u {{ powerdns_service_name }} --since "5 minutes ago" --no-pager -q >/dev/null 2>&1; then
        print_color $CYAN "PowerDNS Service (last 5 minutes):"
        journalctl -u {{ powerdns_service_name }} --since "5 minutes ago" --no-pager -n 3 | tail -3
    fi
    
    # Monitoring logs
    if [ -f "/var/log/monitoring/powerdns-monitor.log" ]; then
        print_color $CYAN "Monitoring (last 3 entries):"
        tail -3 /var/log/monitoring/powerdns-monitor.log 2>/dev/null || echo "No monitoring logs available"
    fi
    
    echo
}

# Function to display network connections
display_network_info() {
    print_color $BLUE "🌍 NETWORK INFORMATION"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # DNS connections
    local dns_connections
    dns_connections=$(netstat -an | grep ":53 " | wc -l)
    print_color $CYAN "🔗 Active DNS Connections: ${dns_connections}"
    
    # Network interface
    local interface
    interface=$(ip route | grep default | awk '{print $5}' | head -1)
    if [ -n "$interface" ]; then
        local ip_addr
        ip_addr=$(ip addr show "$interface" | grep "inet " | awk '{print $2}' | cut -d'/' -f1)
        print_color $CYAN "🌐 Primary Interface: ${interface} (${ip_addr})"
    fi
    
    echo
}

# Function to display footer with controls
display_footer() {
    print_color $PURPLE "╔══════════════════════════════════════════════════════════════╗"
    print_color $PURPLE "║                         CONTROLS                             ║"
    print_color $PURPLE "╠══════════════════════════════════════════════════════════════╣"
    print_color $PURPLE "║ [R] Refresh  [Q] Quit  [L] Logs  [S] Stats  [T] Test DNS    ║"
    print_color $PURPLE "╚══════════════════════════════════════════════════════════════╝"
}

# Function to show detailed logs
show_logs() {
    clear
    print_color $CYAN "📋 DETAILED LOGS"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Press 'q' to return to dashboard"
    echo
    
    # Show recent PowerDNS logs
    print_color $YELLOW "PowerDNS Service Logs (last 20 lines):"
    journalctl -u {{ powerdns_service_name }} --no-pager -n 20
    
    echo
    read -p "Press Enter to continue..."
}

# Function to run DNS test
run_dns_test() {
    clear
    print_color $CYAN "🧪 DNS TEST RESULTS"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Test local resolution
    print_color $YELLOW "Testing local DNS resolution..."
    if dig @{{ ansible_default_ipv4.address }} localhost +short; then
        print_color $GREEN "✅ Local DNS test: PASSED"
    else
        print_color $RED "❌ Local DNS test: FAILED"
    fi
    
    # Test external resolution
    print_color $YELLOW "Testing external DNS resolution..."
    if dig @8.8.8.8 google.com +short >/dev/null; then
        print_color $GREEN "✅ External DNS test: PASSED"
    else
        print_color $RED "❌ External DNS test: FAILED"
    fi
    
    echo
    read -p "Press Enter to continue..."
}

# Interactive mode
interactive_mode() {
    while true; do
        display_header
        display_service_status
        display_system_resources
        display_dns_status
        display_dns_statistics
        display_recent_logs
        display_network_info
        display_footer
        
        echo -n "Enter command: "
        read -t 30 -n 1 cmd
        echo
        
        case $cmd in
            'r'|'R'|'')
                continue
                ;;
            'q'|'Q')
                clear
                print_color $GREEN "👋 Goodbye!"
                exit 0
                ;;
            'l'|'L')
                show_logs
                ;;
            's'|'S')
                display_dns_statistics
                read -p "Press Enter to continue..."
                ;;
            't'|'T')
                run_dns_test
                ;;
            *)
                echo "Invalid command. Press any key to continue..."
                read -n 1
                ;;
        esac
    done
}

# Main function
main() {
    case "${1:-interactive}" in
        "interactive"|"")
            interactive_mode
            ;;
        "status")
            display_header
            display_service_status
            display_system_resources
            display_dns_status
            ;;
        "stats")
            display_dns_statistics
            ;;
        "test")
            run_dns_test
            ;;
        *)
            echo "Usage: $0 {interactive|status|stats|test}"
            echo "  interactive - Start interactive dashboard (default)"
            echo "  status      - Show current status"
            echo "  stats       - Show DNS statistics"
            echo "  test        - Run DNS tests"
            exit 1
            ;;
    esac
}

# Check if running in terminal
if [ -t 1 ]; then
    main "$@"
else
    # Non-interactive mode
    display_header
    display_service_status
    display_system_resources
    display_dns_status
    display_dns_statistics
fi
