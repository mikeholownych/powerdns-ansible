#!/bin/bash
# PowerDNS Monitoring Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOGFILE="/var/log/monitoring/powerdns-monitor.log"
ALERT_THRESHOLD_CPU={{ monitoring_config.alert_thresholds.cpu_usage_percent | default(80) }}
ALERT_THRESHOLD_MEM={{ monitoring_config.alert_thresholds.memory_usage_percent | default(80) }}
ALERT_THRESHOLD_RESPONSE={{ monitoring_config.alert_thresholds.response_time_ms | default(100) }}

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to send alerts
send_alert() {
    local message="$1"
    local severity="$2"
    
    # Log the alert
    log_message "ALERT [$severity]: $message"
    
    # Send email alert if configured
    {% if alert_email is defined %}
    echo "$message" | mail -s "PowerDNS Alert - $severity" {{ alert_email }}
    {% endif %}
    
    # Send webhook alert if configured
    {% if alert_webhook_url is defined %}
    curl -X POST -H "Content-Type: application/json" \
         -d "{\"text\":\"PowerDNS Alert [$severity]: $message\", \"timestamp\":\"$TIMESTAMP\"}" \
         {{ alert_webhook_url }}
    {% endif %}
}

# Check PowerDNS service status
check_service_status() {
    if ! systemctl is-active --quiet {{ powerdns_service_name }}; then
        send_alert "PowerDNS service is not running" "CRITICAL"
        return 1
    fi
    log_message "PowerDNS service is running"
    return 0
}

# Check DNS resolution
check_dns_resolution() {
    local test_domain="localhost"
    local response_time
    
    response_time=$(dig @{{ ansible_default_ipv4.address }} $test_domain +stats | grep "Query time:" | awk '{print $4}')
    
    if [ -z "$response_time" ]; then
        send_alert "DNS resolution test failed" "CRITICAL"
        return 1
    fi
    
    if [ "$response_time" -gt "$ALERT_THRESHOLD_RESPONSE" ]; then
        send_alert "DNS response time is high: ${response_time}ms" "WARNING"
    fi
    
    log_message "DNS resolution test passed (${response_time}ms)"
    return 0
}

# Check PowerDNS API (if enabled)
check_api_status() {
    {% if powerdns_api_readonly is defined %}
    local api_url="http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1/servers"
    local response_code
    
    response_code=$(curl -s -o /dev/null -w "%{http_code}" -H "X-API-Key: {{ powerdns_api_key }}" "$api_url")
    
    if [ "$response_code" != "200" ]; then
        send_alert "PowerDNS API is not responding (HTTP $response_code)" "WARNING"
        return 1
    fi
    
    log_message "PowerDNS API is responding"
    {% else %}
    log_message "PowerDNS API is disabled"
    {% endif %}
    return 0
}

# Check database connectivity
check_database() {
    if ! mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "USE {{ powerdns_db_name }}; SELECT 1;" >/dev/null 2>&1; then
        send_alert "Database connectivity failed" "CRITICAL"
        return 1
    fi
    log_message "Database connectivity OK"
    return 0
}

# Check system resources
check_system_resources() {
    local cpu_usage
    local mem_usage
    local disk_usage
    
    # CPU usage
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | cut -d',' -f1)
    if (( $(echo "$cpu_usage > $ALERT_THRESHOLD_CPU" | bc -l) )); then
        send_alert "High CPU usage: ${cpu_usage}%" "WARNING"
    fi
    
    # Memory usage
    mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
    if (( $(echo "$mem_usage > $ALERT_THRESHOLD_MEM" | bc -l) )); then
        send_alert "High memory usage: ${mem_usage}%" "WARNING"
    fi
    
    # Disk usage
    disk_usage=$(df /etc/powerdns | tail -1 | awk '{print $5}' | cut -d'%' -f1)
    if [ "$disk_usage" -gt 90 ]; then
        send_alert "High disk usage: ${disk_usage}%" "WARNING"
    fi
    
    log_message "System resources - CPU: ${cpu_usage}%, Memory: ${mem_usage}%, Disk: ${disk_usage}%"
}

# Check zone count
check_zone_count() {
    local zone_count
    zone_count=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -D {{ powerdns_db_name }} -se "SELECT COUNT(*) FROM domains;" 2>/dev/null)
    
    if [ -z "$zone_count" ] || [ "$zone_count" -eq 0 ]; then
        send_alert "No zones found in database" "WARNING"
        return 1
    fi
    
    log_message "Zone count: $zone_count"
    return 0
}

# Main monitoring function
main() {
    log_message "Starting PowerDNS monitoring check"
    
    local exit_code=0
    
    check_service_status || exit_code=1
    check_dns_resolution || exit_code=1
    check_api_status || exit_code=1
    check_database || exit_code=1
    check_system_resources
    check_zone_count || exit_code=1
    
    if [ $exit_code -eq 0 ]; then
        log_message "All PowerDNS monitoring checks passed"
    else
        log_message "Some PowerDNS monitoring checks failed"
    fi
    
    log_message "PowerDNS monitoring check completed"
    return $exit_code
}

# Run main function
main "$@"
