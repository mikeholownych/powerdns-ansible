#!/bin/bash
# System Resource Monitoring Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOGFILE="/var/log/monitoring/system-monitor.log"

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to get system metrics
get_system_metrics() {
    local cpu_usage
    local mem_total
    local mem_used
    local mem_free
    local mem_usage_percent
    local disk_usage
    local load_avg
    local uptime_info
    local network_stats
    
    # CPU Usage
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | sed 's/,//')
    
    # Memory Usage
    mem_info=$(free -m)
    mem_total=$(echo "$mem_info" | grep "Mem:" | awk '{print $2}')
    mem_used=$(echo "$mem_info" | grep "Mem:" | awk '{print $3}')
    mem_free=$(echo "$mem_info" | grep "Mem:" | awk '{print $4}')
    mem_usage_percent=$(echo "scale=1; $mem_used * 100 / $mem_total" | bc)
    
    # Disk Usage
    disk_usage=$(df -h /etc/powerdns | tail -1 | awk '{print $5}')
    
    # Load Average
    load_avg=$(uptime | awk -F'load average:' '{print $2}')
    
    # Uptime
    uptime_info=$(uptime -p)
    
    # Network Statistics (for DNS port)
    network_stats=$(netstat -an | grep ":53 " | wc -l)
    
    # Log all metrics
    log_message "=== System Metrics ==="
    log_message "CPU Usage: ${cpu_usage}%"
    log_message "Memory: ${mem_used}MB/${mem_total}MB (${mem_usage_percent}%)"
    log_message "Disk Usage: ${disk_usage}"
    log_message "Load Average:${load_avg}"
    log_message "Uptime: ${uptime_info}"
    log_message "DNS Connections: ${network_stats}"
    
    # PowerDNS specific metrics
    if systemctl is-active --quiet {{ powerdns_service_name }}; then
        local pdns_memory
        local pdns_cpu
        
        pdns_memory=$(ps -o pid,vsz,rss,comm -C pdns_server | tail -n +2 | awk '{print $3}' | head -1)
        pdns_cpu=$(ps -o pid,pcpu,comm -C pdns_server | tail -n +2 | awk '{print $2}' | head -1)
        
        if [ -n "$pdns_memory" ] && [ -n "$pdns_cpu" ]; then
            log_message "PowerDNS Memory: ${pdns_memory}KB"
            log_message "PowerDNS CPU: ${pdns_cpu}%"
        fi
    fi
    
    # Database connections (if MySQL is running)
    if systemctl is-active --quiet {{ mysql_service_name }}; then
        local db_connections
        db_connections=$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SHOW STATUS LIKE 'Threads_connected';" 2>/dev/null | tail -1 | awk '{print $2}')
        if [ -n "$db_connections" ]; then
            log_message "Database Connections: ${db_connections}"
        fi
    fi
    
    log_message "=== End System Metrics ==="
}

# Function to check system health
check_system_health() {
    local issues=0
    
    # Check disk space
    local disk_usage_num
    disk_usage_num=$(df /etc/powerdns | tail -1 | awk '{print $5}' | cut -d'%' -f1)
    if [ "$disk_usage_num" -gt 90 ]; then
        log_message "WARNING: Disk usage is high (${disk_usage_num}%)"
        issues=$((issues + 1))
    fi
    
    # Check memory usage
    local mem_usage
    mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [ "$mem_usage" -gt 90 ]; then
        log_message "WARNING: Memory usage is high (${mem_usage}%)"
        issues=$((issues + 1))
    fi
    
    # Check load average
    local load_1min
    load_1min=$(uptime | awk -F'load average:' '{print $2}' | awk -F',' '{print $1}' | xargs)
    local cpu_cores
    cpu_cores=$(nproc)
    local load_threshold
    load_threshold=$((cpu_cores * 2))
    
    if (( $(echo "$load_1min > $load_threshold" | bc -l) )); then
        log_message "WARNING: Load average is high (${load_1min} on ${cpu_cores} cores)"
        issues=$((issues + 1))
    fi
    
    # Check for failed services
    if ! systemctl is-active --quiet {{ powerdns_service_name }}; then
        log_message "CRITICAL: PowerDNS service is not running"
        issues=$((issues + 1))
    fi
    
    if ! systemctl is-active --quiet {{ mysql_service_name }}; then
        log_message "CRITICAL: MySQL service is not running"
        issues=$((issues + 1))
    fi
    
    if [ $issues -eq 0 ]; then
        log_message "System health check: All OK"
    else
        log_message "System health check: $issues issues found"
    fi
    
    return $issues
}

# Function to collect performance statistics
collect_performance_stats() {
    log_message "=== Performance Statistics ==="
    
    # DNS query statistics (if available)
    if command -v pdns_control >/dev/null 2>&1; then
        local query_stats
        query_stats=$(pdns_control show '*' 2>/dev/null | grep -E "(udp-queries|tcp-queries|servfail-answers|noerror-answers)")
        if [ -n "$query_stats" ]; then
            log_message "DNS Query Stats:"
            echo "$query_stats" | while read -r line; do
                log_message "  $line"
            done
        fi
    fi
    
    # Network interface statistics
    local interface
    interface=$(ip route | grep default | awk '{print $5}' | head -1)
    if [ -n "$interface" ]; then
        local rx_bytes
        local tx_bytes
        rx_bytes=$(cat /sys/class/net/"$interface"/statistics/rx_bytes)
        tx_bytes=$(cat /sys/class/net/"$interface"/statistics/tx_bytes)
        log_message "Network ($interface): RX=$(numfmt --to=iec $rx_bytes)B TX=$(numfmt --to=iec $tx_bytes)B"
    fi
    
    log_message "=== End Performance Statistics ==="
}

# Main function
main() {
    log_message "Starting system monitoring check"
    
    get_system_metrics
    check_system_health
    collect_performance_stats
    
    log_message "System monitoring check completed"
}

# Run main function
main "$@"
