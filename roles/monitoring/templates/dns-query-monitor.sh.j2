#!/bin/bash
# DNS Query Monitoring Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOGFILE="/var/log/monitoring/dns-monitor.log"
DNS_SERVER="{{ ansible_default_ipv4.address }}"

# Test domains and queries
TEST_DOMAINS=(
    "localhost"
    {% for domain in primary_domains %}
    "{{ domain }}"
    {% endfor %}
)

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to test DNS resolution
test_dns_resolution() {
    local domain="$1"
    local query_type="${2:-A}"
    local response_time
    local result
    
    # Perform DNS query and capture response time
    result=$(dig @"$DNS_SERVER" "$domain" "$query_type" +time=5 +tries=2 2>&1)
    response_time=$(echo "$result" | grep "Query time:" | awk '{print $4}')
    
    if [ -z "$response_time" ]; then
        log_message "FAILED: DNS query for $domain ($query_type) - No response"
        return 1
    fi
    
    # Check if query was successful
    if echo "$result" | grep -q "NOERROR"; then
        log_message "SUCCESS: DNS query for $domain ($query_type) - ${response_time}ms"
        return 0
    else
        local status
        status=$(echo "$result" | grep -o "status: [A-Z]*" | cut -d' ' -f2)
        log_message "FAILED: DNS query for $domain ($query_type) - Status: ${status:-UNKNOWN}"
        return 1
    fi
}

# Function to test reverse DNS
test_reverse_dns() {
    local ip="$1"
    local response_time
    local result
    
    result=$(dig @"$DNS_SERVER" -x "$ip" +time=5 +tries=2 2>&1)
    response_time=$(echo "$result" | grep "Query time:" | awk '{print $4}')
    
    if [ -z "$response_time" ]; then
        log_message "FAILED: Reverse DNS query for $ip - No response"
        return 1
    fi
    
    if echo "$result" | grep -q "NOERROR"; then
        log_message "SUCCESS: Reverse DNS query for $ip - ${response_time}ms"
        return 0
    else
        log_message "FAILED: Reverse DNS query for $ip - No PTR record"
        return 1
    fi
}

# Function to test different record types
test_record_types() {
    local domain="$1"
    local types=("A" "NS" "MX" "TXT" "SOA")
    local success_count=0
    
    for type in "${types[@]}"; do
        if test_dns_resolution "$domain" "$type"; then
            success_count=$((success_count + 1))
        fi
    done
    
    log_message "Record type tests for $domain: $success_count/${#types[@]} successful"
    return $((${#types[@]} - success_count))
}

# Function to test DNS server performance
test_dns_performance() {
    local total_queries=10
    local successful_queries=0
    local total_time=0
    local domain="localhost"
    
    log_message "Starting DNS performance test ($total_queries queries)"
    
    for ((i=1; i<=total_queries; i++)); do
        local start_time
        local end_time
        local query_time
        
        start_time=$(date +%s%N)
        if dig @"$DNS_SERVER" "$domain" +short >/dev/null 2>&1; then
            end_time=$(date +%s%N)
            query_time=$(((end_time - start_time) / 1000000))  # Convert to milliseconds
            total_time=$((total_time + query_time))
            successful_queries=$((successful_queries + 1))
        fi
    done
    
    if [ $successful_queries -gt 0 ]; then
        local avg_time
        avg_time=$((total_time / successful_queries))
        log_message "DNS Performance: $successful_queries/$total_queries successful, avg ${avg_time}ms"
    else
        log_message "DNS Performance: All queries failed"
    fi
    
    return $((total_queries - successful_queries))
}

# Function to check DNS server availability
check_dns_server_availability() {
    local port_53_tcp
    local port_53_udp
    local api_port
    
    # Check TCP port 53
    if nc -z -w5 "$DNS_SERVER" 53 2>/dev/null; then
        port_53_tcp="OPEN"
    else
        port_53_tcp="CLOSED"
    fi
    
    # Check UDP port 53 (using dig)
    if dig @"$DNS_SERVER" localhost +time=5 >/dev/null 2>&1; then
        port_53_udp="OPEN"
    else
        port_53_udp="CLOSED"
    fi
    
    log_message "DNS Server Ports - TCP:53 $port_53_tcp, UDP:53 $port_53_udp"
    
    {% if powerdns_webserver_port is defined %}
    # Check API port if enabled
    if nc -z -w5 "$DNS_SERVER" {{ powerdns_webserver_port }}; then
        api_port="OPEN"
    else
        api_port="CLOSED"
    fi
    log_message "PowerDNS API Port {{ powerdns_webserver_port }}: $api_port"
    {% endif %}
    
    if [ "$port_53_tcp" = "CLOSED" ] || [ "$port_53_udp" = "CLOSED" ]; then
        return 1
    fi
    return 0
}

# Function to monitor DNS query patterns
monitor_query_patterns() {
    if command -v pdns_control >/dev/null 2>&1; then
        local query_stats
        query_stats=$(pdns_control show '*' 2>/dev/null | grep -E "(udp-queries|tcp-queries|recursion-unanswered|servfail-answers|noerror-answers)")
        
        if [ -n "$query_stats" ]; then
            log_message "=== DNS Query Statistics ==="
            echo "$query_stats" | while read -r line; do
                log_message "$line"
            done
            log_message "=== End DNS Query Statistics ==="
        fi
    fi
}

# Function to test external DNS resolution
test_external_dns() {
    local external_servers=("8.8.8.8" "1.1.1.1")
    local test_domain="google.com"
    
    for server in "${external_servers[@]}"; do
        if dig @"$server" "$test_domain" +time=5 >/dev/null 2>&1; then
            log_message "External DNS test via $server: SUCCESS"
        else
            log_message "External DNS test via $server: FAILED"
        fi
    done
}

# Main monitoring function
main() {
    log_message "Starting DNS query monitoring"
    
    local total_failures=0
    
    # Check DNS server availability
    if ! check_dns_server_availability; then
        log_message "CRITICAL: DNS server is not available"
        total_failures=$((total_failures + 1))
    fi
    
    # Test basic DNS resolution for each domain
    for domain in "${TEST_DOMAINS[@]}"; do
        if ! test_dns_resolution "$domain"; then
            total_failures=$((total_failures + 1))
        fi
    done
    
    # Test different record types for primary domain
    if [ ${#TEST_DOMAINS[@]} -gt 0 ]; then
        test_record_types "${TEST_DOMAINS[0]}"
        total_failures=$((total_failures + $?))
    fi
    
    # Test reverse DNS
    test_reverse_dns "{{ ansible_default_ipv4.address }}"
    total_failures=$((total_failures + $?))
    
    # Performance test
    test_dns_performance
    total_failures=$((total_failures + $?))
    
    # Monitor query patterns
    monitor_query_patterns
    
    # Test external DNS (to verify network connectivity)
    test_external_dns
    
    if [ $total_failures -eq 0 ]; then
        log_message "All DNS monitoring checks passed"
    else
        log_message "DNS monitoring completed with $total_failures failures"
    fi
    
    log_message "DNS query monitoring completed"
    return $total_failures
}

# Run main function
main "$@"
