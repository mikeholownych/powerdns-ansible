#!/bin/bash
# Alert Manager Script for PowerDNS Monitoring
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
HOSTNAME=$(hostname)
ALERT_LOG="/var/log/monitoring/alerts.log"

# Configuration
EMAIL_ENABLED={{ 'true' if alert_email is defined else 'false' }}
WEBHOOK_ENABLED={{ 'true' if alert_webhook_url is defined else 'false' }}
{% if alert_email is defined %}
ALERT_EMAIL="{{ alert_email }}"
{% endif %}
{% if alert_webhook_url is defined %}
WEBHOOK_URL="{{ alert_webhook_url }}"
{% endif %}

# Function to log alerts
log_alert() {
    local message="$1"
    local severity="$2"
    echo "[$TIMESTAMP] [$severity] $message" >> "$ALERT_LOG"
}

# Function to send email alert
send_email_alert() {
    local subject="$1"
    local message="$2"
    local severity="$3"
    
    if [ "$EMAIL_ENABLED" = "true" ]; then
        {
            echo "PowerDNS Alert - $HOSTNAME"
            echo "Timestamp: $TIMESTAMP"
            echo "Severity: $severity"
            echo "Subject: $subject"
            echo ""
            echo "Message:"
            echo "$message"
            echo ""
            echo "Server Details:"
            echo "- Hostname: $HOSTNAME"
            echo "- IP Address: {{ ansible_default_ipv4.address }}"
            echo "- Role: {{ server_role }}"
            echo ""
            echo "System Status:"
            systemctl status {{ powerdns_service_name }} --no-pager -l
        } | mail -s "PowerDNS Alert [$severity]: $subject" "$ALERT_EMAIL"
        
        log_alert "Email alert sent to $ALERT_EMAIL" "INFO"
    fi
}

# Function to send webhook alert
send_webhook_alert() {
    local subject="$1"
    local message="$2"
    local severity="$3"
    
    if [ "$WEBHOOK_ENABLED" = "true" ]; then
        local payload
        payload=$(cat <<EOF
{
    "text": "PowerDNS Alert [$severity]: $subject",
    "timestamp": "$TIMESTAMP",
    "hostname": "$HOSTNAME",
    "ip_address": "{{ ansible_default_ipv4.address }}",
    "server_role": "{{ server_role }}",
    "severity": "$severity",
    "message": "$message",
    "details": {
        "service_status": "$(systemctl is-active {{ powerdns_service_name }})",
        "database_status": "$(systemctl is-active {{ mysql_service_name }})"
    }
}
EOF
        )
        
        if curl -X POST -H "Content-Type: application/json" \
                -d "$payload" \
                --max-time 30 \
                --silent \
                "$WEBHOOK_URL" >/dev/null 2>&1; then
            log_alert "Webhook alert sent successfully" "INFO"
        else
            log_alert "Failed to send webhook alert" "ERROR"
        fi
    fi
}

# Function to send alert (combines email and webhook)
send_alert() {
    local subject="$1"
    local message="$2"
    local severity="${3:-WARNING}"
    
    log_alert "$subject: $message" "$severity"
    
    # Send email alert
    send_email_alert "$subject" "$message" "$severity"
    
    # Send webhook alert
    send_webhook_alert "$subject" "$message" "$severity"
}

# Function to check alert conditions
check_alert_conditions() {
    local alerts_sent=0
    
    # Check PowerDNS service
    if ! systemctl is-active --quiet {{ powerdns_service_name }}; then
        send_alert "PowerDNS Service Down" "PowerDNS service is not running on $HOSTNAME" "CRITICAL"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    # Check MySQL service
    if ! systemctl is-active --quiet {{ mysql_service_name }}; then
        send_alert "Database Service Down" "MySQL/MariaDB service is not running on $HOSTNAME" "CRITICAL"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    # Check DNS resolution
    if ! dig @{{ ansible_default_ipv4.address }} localhost +time=5 >/dev/null 2>&1; then
        send_alert "DNS Resolution Failed" "DNS queries are failing on $HOSTNAME" "CRITICAL"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    # Check system resources
    local cpu_usage
    local mem_usage
    local disk_usage
    
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | cut -d',' -f1)
    mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    disk_usage=$(df /etc/powerdns | tail -1 | awk '{print $5}' | cut -d'%' -f1)
    
    # CPU alert
    if (( $(echo "$cpu_usage > {{ monitoring_config.alert_thresholds.cpu_usage_percent | default(80) }}" | bc -l) )); then
        send_alert "High CPU Usage" "CPU usage is ${cpu_usage}% on $HOSTNAME" "WARNING"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    # Memory alert
    if [ "$mem_usage" -gt "{{ monitoring_config.alert_thresholds.memory_usage_percent | default(80) }}" ]; then
        send_alert "High Memory Usage" "Memory usage is ${mem_usage}% on $HOSTNAME" "WARNING"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    # Disk alert
    if [ "$disk_usage" -gt 90 ]; then
        send_alert "High Disk Usage" "Disk usage is ${disk_usage}% on $HOSTNAME" "WARNING"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    # Check database connectivity
    if ! mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SELECT 1;" >/dev/null 2>&1; then
        send_alert "Database Connection Failed" "Cannot connect to PowerDNS database on $HOSTNAME" "CRITICAL"
        alerts_sent=$((alerts_sent + 1))
    fi
    
    return $alerts_sent
}

# Function to send test alert
send_test_alert() {
    send_alert "Test Alert" "This is a test alert from PowerDNS monitoring system on $HOSTNAME" "INFO"
    echo "Test alert sent successfully"
}

# Function to show alert status
show_alert_status() {
    echo "Alert Manager Status:"
    echo "- Email alerts: $EMAIL_ENABLED"
    echo "- Webhook alerts: $WEBHOOK_ENABLED"
    echo "- Hostname: $HOSTNAME"
    echo "- IP Address: {{ ansible_default_ipv4.address }}"
    echo "- Server Role: {{ server_role }}"
    echo ""
    
    if [ -f "$ALERT_LOG" ]; then
        echo "Recent alerts (last 10):"
        tail -10 "$ALERT_LOG"
    else
        echo "No alerts logged yet"
    fi
}

# Main function
main() {
    case "${1:-check}" in
        "check")
            check_alert_conditions
            ;;
        "test")
            send_test_alert
            ;;
        "status")
            show_alert_status
            ;;
        "send")
            if [ $# -lt 3 ]; then
                echo "Usage: $0 send <subject> <message> [severity]"
                exit 1
            fi
            send_alert "$2" "$3" "${4:-INFO}"
            ;;
        *)
            echo "Usage: $0 {check|test|status|send}"
            echo "  check  - Check alert conditions and send alerts if needed"
            echo "  test   - Send a test alert"
            echo "  status - Show alert manager status"
            echo "  send   - Send a custom alert"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
