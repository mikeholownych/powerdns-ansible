#!/bin/bash
# Security Report Generator for PowerDNS
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
HOSTNAME=$(hostname)
REPORT_DIR="/var/log/security-reports"
REPORT_FILE="$REPORT_DIR/security-report-$(date +%Y%m%d-%H%M%S).html"

# Ensure report directory exists
mkdir -p "$REPORT_DIR"

# Function to generate HTML report
generate_html_report() {
    cat > "$REPORT_FILE" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PowerDNS Security Report - $HOSTNAME</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { background-color: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .section h2 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-bottom: 20px; }
        .status-card { background-color: #ecf0f1; padding: 15px; border-radius: 8px; border-left: 4px solid #3498db; }
        .status-ok { border-left-color: #27ae60; }
        .status-warning { border-left-color: #f39c12; }
        .status-critical { border-left-color: #e74c3c; }
        .metric { display: flex; justify-content: space-between; margin-bottom: 10px; }
        .metric-value { font-weight: bold; }
        table { width: 100%; border-collapse: collapse; margin-top: 15px; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #34495e; color: white; }
        tr:nth-child(even) { background-color: #f2f2f2; }
        .alert-high { color: #e74c3c; font-weight: bold; }
        .alert-medium { color: #f39c12; font-weight: bold; }
        .alert-low { color: #27ae60; }
        .footer { text-align: center; margin-top: 30px; color: #7f8c8d; }
        .chart { background-color: #ecf0f1; padding: 20px; border-radius: 8px; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>PowerDNS Security Report</h1>
            <p><strong>Server:</strong> $HOSTNAME ({{ ansible_default_ipv4.address }})</p>
            <p><strong>Role:</strong> {{ server_role | title }}</p>
            <p><strong>Generated:</strong> $TIMESTAMP</p>
        </div>

        <div class="section">
            <h2>System Status Overview</h2>
            <div class="status-grid">
EOF

    # Add service status cards
    local pdns_status
    local mysql_status
    local firewall_status
    local fail2ban_status
    
    if systemctl is-active --quiet {{ powerdns_service_name }}; then
        pdns_status="status-ok"
        pdns_text="Running"
    else
        pdns_status="status-critical"
        pdns_text="Stopped"
    fi
    
    if systemctl is-active --quiet {{ mysql_service_name }}; then
        mysql_status="status-ok"
        mysql_text="Running"
    else
        mysql_status="status-critical"
        mysql_text="Stopped"
    fi
    
    if command -v ufw >/dev/null 2>&1 && ufw status | grep -q "Status: active"; then
        firewall_status="status-ok"
        firewall_text="Active (UFW)"
    elif command -v firewall-cmd >/dev/null 2>&1 && firewall-cmd --state >/dev/null 2>&1; then
        firewall_status="status-ok"
        firewall_text="Active (firewalld)"
    else
        firewall_status="status-warning"
        firewall_text="Inactive"
    fi
    
    if systemctl is-active --quiet fail2ban 2>/dev/null; then
        fail2ban_status="status-ok"
        fail2ban_text="Running"
    else
        fail2ban_status="status-warning"
        fail2ban_text="Not Running"
    fi

    cat >> "$REPORT_FILE" << EOF
                <div class="status-card $pdns_status">
                    <h3>PowerDNS Service</h3>
                    <div class="metric">
                        <span>Status:</span>
                        <span class="metric-value">$pdns_text</span>
                    </div>
                </div>
                <div class="status-card $mysql_status">
                    <h3>Database Service</h3>
                    <div class="metric">
                        <span>Status:</span>
                        <span class="metric-value">$mysql_text</span>
                    </div>
                </div>
                <div class="status-card $firewall_status">
                    <h3>Firewall</h3>
                    <div class="metric">
                        <span>Status:</span>
                        <span class="metric-value">$firewall_text</span>
                    </div>
                </div>
                <div class="status-card $fail2ban_status">
                    <h3>Intrusion Prevention</h3>
                    <div class="metric">
                        <span>Status:</span>
                        <span class="metric-value">$fail2ban_text</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="section">
            <h2>Security Metrics</h2>
            <div class="status-grid">
EOF

    # Calculate security metrics
    local failed_logins
    local blocked_connections
    local dns_queries
    local banned_ips
    
    failed_logins=$(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)
    blocked_connections=$(grep "$(date '+%b %d')" /var/log/ufw.log 2>/dev/null | grep "BLOCK" | wc -l)
    dns_queries=$(grep "$(date '+%Y-%m-%d')" /var/log/powerdns/*.log 2>/dev/null | wc -l)
    
    if command -v fail2ban-client >/dev/null 2>&1; then
        banned_ips=$(fail2ban-client status 2>/dev/null | grep "Currently banned:" | awk '{print $3}' || echo "0")
    else
        banned_ips="N/A"
    fi

    cat >> "$REPORT_FILE" << EOF
                <div class="status-card">
                    <h3>Authentication</h3>
                    <div class="metric">
                        <span>Failed Logins Today:</span>
                        <span class="metric-value">$failed_logins</span>
                    </div>
                </div>
                <div class="status-card">
                    <h3>Network Security</h3>
                    <div class="metric">
                        <span>Blocked Connections:</span>
                        <span class="metric-value">$blocked_connections</span>
                    </div>
                </div>
                <div class="status-card">
                    <h3>DNS Activity</h3>
                    <div class="metric">
                        <span>Queries Today:</span>
                        <span class="metric-value">$dns_queries</span>
                    </div>
                </div>
                <div class="status-card">
                    <h3>Banned IPs</h3>
                    <div class="metric">
                        <span>Currently Banned:</span>
                        <span class="metric-value">$banned_ips</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="section">
            <h2>System Resources</h2>
EOF

    # Add system resource information
    local cpu_usage
    local mem_usage
    local disk_usage
    local load_avg
    local uptime_info
    
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | cut -d',' -f1)
    mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
    disk_usage=$(df /etc/powerdns | tail -1 | awk '{print $5}')
    load_avg=$(uptime | awk -F'load average:' '{print $2}')
    uptime_info=$(uptime -p)

    cat >> "$REPORT_FILE" << EOF
            <div class="status-grid">
                <div class="status-card">
                    <h3>CPU Usage</h3>
                    <div class="metric">
                        <span>Current:</span>
                        <span class="metric-value">${cpu_usage}%</span>
                    </div>
                </div>
                <div class="status-card">
                    <h3>Memory Usage</h3>
                    <div class="metric">
                        <span>Current:</span>
                        <span class="metric-value">${mem_usage}%</span>
                    </div>
                </div>
                <div class="status-card">
                    <h3>Disk Usage</h3>
                    <div class="metric">
                        <span>Root Partition:</span>
                        <span class="metric-value">$disk_usage</span>
                    </div>
                </div>
                <div class="status-card">
                    <h3>System Load</h3>
                    <div class="metric">
                        <span>Load Average:</span>
                        <span class="metric-value">$load_avg</span>
                    </div>
                </div>
            </div>
            <p><strong>Uptime:</strong> $uptime_info</p>
        </div>

        <div class="section">
            <h2>Recent Security Events</h2>
            <table>
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Severity</th>
                        <th>Event</th>
                    </tr>
                </thead>
                <tbody>
EOF

    # Add recent security events
    if [ -f /var/log/security-monitor.log ]; then
        grep "SECURITY ALERT" /var/log/security-monitor.log | tail -10 | while read -r line; do
            local timestamp
            local severity
            local event
            
            timestamp=$(echo "$line" | grep -oE '\[[0-9-]+ [0-9:]+\]')
            severity=$(echo "$line" | grep -oE '\[(CRITICAL|HIGH|WARNING|INFO)\]')
            event=$(echo "$line" | sed 's/.*SECURITY ALERT \[[A-Z]*\]: //')
            
            local severity_class
            case "$severity" in
                *CRITICAL*) severity_class="alert-high" ;;
                *HIGH*) severity_class="alert-high" ;;
                *WARNING*) severity_class="alert-medium" ;;
                *) severity_class="alert-low" ;;
            esac
            
            cat >> "$REPORT_FILE" << EOF
                    <tr>
                        <td>$timestamp</td>
                        <td class="$severity_class">$severity</td>
                        <td>$event</td>
                    </tr>
EOF
        done
    else
        cat >> "$REPORT_FILE" << EOF
                    <tr>
                        <td colspan="3">No recent security events recorded</td>
                    </tr>
EOF
    fi

    cat >> "$REPORT_FILE" << EOF
                </tbody>
            </table>
        </div>

        <div class="section">
            <h2>Configuration Summary</h2>
            <table>
                <thead>
                    <tr>
                        <th>Component</th>
                        <th>Configuration</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>PowerDNS Config</td>
                        <td>{{ powerdns_config_file }}</td>
                        <td class="alert-low">$([ -f {{ powerdns_config_file }} ] && echo "Present" || echo "Missing")</td>
                    </tr>
                    <tr>
                        <td>Database</td>
                        <td>{{ powerdns_db_name }}@{{ powerdns_db_host }}</td>
                        <td class="alert-low">$(mysql -u {{ powerdns_db_user }} -p{{ powerdns_db_password }} -h {{ powerdns_db_host }} -e "SELECT 1;" >/dev/null 2>&1 && echo "Connected" || echo "Connection Failed")</td>
                    </tr>
                    <tr>
                        <td>Backup Directory</td>
                        <td>{{ powerdns_backup_dir }}</td>
                        <td class="alert-low">$([ -d {{ powerdns_backup_dir }} ] && echo "Present" || echo "Missing")</td>
                    </tr>
                    <tr>
                        <td>Monitoring</td>
                        <td>{{ 'Enabled' if monitoring_config.enabled | default(true) else 'Disabled' }}</td>
                        <td class="alert-low">Active</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="footer">
            <p>This report was automatically generated by the PowerDNS Security Monitoring System</p>
            <p>Report generated on $TIMESTAMP</p>
        </div>
    </div>
</body>
</html>
EOF
}

# Function to generate text report
generate_text_report() {
    local text_file="$REPORT_DIR/security-report-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "PowerDNS Security Report"
        echo "======================="
        echo "Server: $HOSTNAME ({{ ansible_default_ipv4.address }})"
        echo "Role: {{ server_role | title }}"
        echo "Generated: $TIMESTAMP"
        echo ""
        
        echo "System Status:"
        echo "- PowerDNS: $(systemctl is-active {{ powerdns_service_name }})"
        echo "- MySQL: $(systemctl is-active {{ mysql_service_name }})"
        echo "- Firewall: $(if command -v ufw >/dev/null; then ufw status | head -1; elif command -v firewall-cmd >/dev/null; then firewall-cmd --state; else echo "Unknown"; fi)"
        echo "- Fail2ban: $(systemctl is-active fail2ban 2>/dev/null || echo "Not installed")"
        echo ""
        
        echo "Security Metrics:"
        echo "- Failed logins today: $(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)"
        echo "- Blocked connections: $(grep "$(date '+%b %d')" /var/log/ufw.log 2>/dev/null | grep "BLOCK" | wc -l)"
        echo "- DNS queries today: $(grep "$(date '+%Y-%m-%d')" /var/log/powerdns/*.log 2>/dev/null | wc -l)"
        echo "- Currently banned IPs: $(fail2ban-client status 2>/dev/null | grep "Currently banned:" | awk '{print $3}' || echo "0")"
        echo ""
        
        echo "System Resources:"
        echo "- CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | cut -d',' -f1)%"
        echo "- Memory Usage: $(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')%"
        echo "- Disk Usage: $(df /etc/powerdns | tail -1 | awk '{print $5}')"
        echo "- Load Average:$(uptime | awk -F'load average:' '{print $2}')"
        echo "- Uptime: $(uptime -p)"
        echo ""
        
        echo "Recent Security Events:"
        if [ -f /var/log/security-monitor.log ]; then
            grep "SECURITY ALERT" /var/log/security-monitor.log | tail -10 || echo "No recent security alerts"
        else
            echo "No security log found"
        fi
        
    } > "$text_file"
    
    echo "Text report generated: $text_file"
}

# Main function
main() {
    case "${1:-html}" in
        "html")
            generate_html_report
            echo "HTML security report generated: $REPORT_FILE"
            ;;
        "text")
            generate_text_report
            ;;
        "both")
            generate_html_report
            generate_text_report
            echo "Both HTML and text reports generated"
            ;;
        *)
            echo "Usage: $0 {html|text|both}"
            echo "  html - Generate HTML report (default)"
            echo "  text - Generate text report"
            echo "  both - Generate both formats"
            exit 1
            ;;
    esac
    
    # Clean up old reports (keep last 30 days)
    find "$REPORT_DIR" -name "security-report-*" -mtime +30 -delete 2>/dev/null
}

# Run main function
main "$@"
