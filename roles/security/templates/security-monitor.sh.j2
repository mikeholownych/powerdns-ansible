#!/bin/bash
# Security Monitoring Script for PowerDNS
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOGFILE="/var/log/security-monitor.log"
HOSTNAME=$(hostname)

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to send security alert
send_security_alert() {
    local subject="$1"
    local message="$2"
    local severity="${3:-WARNING}"
    
    log_message "SECURITY ALERT [$severity]: $subject"
    
    # Send email alert if configured
    {% if alert_email is defined %}
    {
        echo "PowerDNS Security Alert - $HOSTNAME"
        echo "Timestamp: $TIMESTAMP"
        echo "Severity: $severity"
        echo "Subject: $subject"
        echo ""
        echo "Details:"
        echo "$message"
        echo ""
        echo "System Information:"
        echo "- Hostname: $HOSTNAME"
        echo "- IP Address: {{ ansible_default_ipv4.address }}"
        echo "- Server Role: {{ server_role }}"
        echo ""
        echo "Recommended Actions:"
        case "$severity" in
            "CRITICAL")
                echo "- Immediate investigation required"
                echo "- Consider isolating the system"
                echo "- Review system logs"
                ;;
            "HIGH")
                echo "- Investigate within 1 hour"
                echo "- Review security logs"
                echo "- Check system integrity"
                ;;
            "WARNING")
                echo "- Review within 24 hours"
                echo "- Monitor for patterns"
                ;;
        esac
    } | mail -s "Security Alert [$severity]: $subject" {{ alert_email }}
    {% endif %}
    
    # Send webhook alert if configured
    {% if alert_webhook_url is defined %}
    curl -X POST -H "Content-Type: application/json" \
         -d "{\"text\":\"Security Alert [$severity] on $HOSTNAME: $subject\", \"timestamp\":\"$TIMESTAMP\", \"severity\":\"$severity\", \"details\":\"$message\"}" \
         {{ alert_webhook_url }} >/dev/null 2>&1
    {% endif %}
}

# Check for failed login attempts
check_failed_logins() {
    local failed_logins
    failed_logins=$(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)
    
    if [ "$failed_logins" -gt 10 ]; then
        local details
        details=$(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | tail -5)
        send_security_alert "High Number of Failed Login Attempts" "Detected $failed_logins failed login attempts today. Recent attempts:\n$details" "HIGH"
    elif [ "$failed_logins" -gt 5 ]; then
        send_security_alert "Multiple Failed Login Attempts" "Detected $failed_logins failed login attempts today" "WARNING"
    fi
    
    log_message "Failed login attempts today: $failed_logins"
}

# Check for suspicious DNS queries
check_suspicious_dns() {
    local suspicious_queries=0
    local dns_log_files="/var/log/powerdns/*.log"
    
    if ls $dns_log_files >/dev/null 2>&1; then
        # Check for high query rates from single IPs
        local high_rate_ips
        high_rate_ips=$(grep "$(date '+%Y-%m-%d')" $dns_log_files 2>/dev/null | \
                       grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | \
                       sort | uniq -c | sort -nr | head -5 | \
                       awk '$1 > 1000 {print $2 " (" $1 " queries)"}')
        
        if [ -n "$high_rate_ips" ]; then
            send_security_alert "High DNS Query Rate Detected" "IPs with high query rates:\n$high_rate_ips" "WARNING"
            suspicious_queries=$((suspicious_queries + 1))
        fi
        
        # Check for queries to suspicious domains
        local suspicious_domains
        suspicious_domains=$(grep -E "(\.tk|\.ml|\.ga|\.cf|tempuri\.org|bit\.ly)" $dns_log_files 2>/dev/null | grep "$(date '+%Y-%m-%d')" | wc -l)
        
        if [ "$suspicious_domains" -gt 50 ]; then
            send_security_alert "Suspicious Domain Queries" "Detected $suspicious_domains queries to potentially malicious domains" "WARNING"
            suspicious_queries=$((suspicious_queries + 1))
        fi
    fi
    
    log_message "Suspicious DNS activity checks: $suspicious_queries alerts generated"
}

# Check system integrity
check_system_integrity() {
    local integrity_issues=0
    
    # Check for modified system files
    if command -v aide >/dev/null 2>&1; then
        if [ -f /var/log/aide/aide-check.log ]; then
            local recent_changes
            recent_changes=$(grep "$(date '+%Y-%m-%d')" /var/log/aide/aide-check.log 2>/dev/null | grep -c "ALERT\|WARNING\|CRITICAL")
            
            if [ "$recent_changes" -gt 0 ]; then
                send_security_alert "File Integrity Issues Detected" "AIDE detected $recent_changes integrity issues today" "HIGH"
                integrity_issues=$((integrity_issues + 1))
            fi
        fi
    fi
    
    # Check for unusual processes
    local suspicious_processes
    suspicious_processes=$(ps aux | grep -E "(nc|netcat|nmap|masscan|zmap)" | grep -v grep | wc -l)
    
    if [ "$suspicious_processes" -gt 0 ]; then
        local process_details
        process_details=$(ps aux | grep -E "(nc|netcat|nmap|masscan|zmap)" | grep -v grep)
        send_security_alert "Suspicious Processes Detected" "Found potentially suspicious processes:\n$process_details" "HIGH"
        integrity_issues=$((integrity_issues + 1))
    fi
    
    log_message "System integrity checks: $integrity_issues issues found"
}

# Check network security
check_network_security() {
    local network_issues=0
    
    # Check for unusual network connections
    local external_connections
    external_connections=$(netstat -an | grep ESTABLISHED | grep -v "127.0.0.1\|{{ ansible_default_ipv4.address }}" | wc -l)
    
    if [ "$external_connections" -gt 20 ]; then
        local connection_details
        connection_details=$(netstat -an | grep ESTABLISHED | grep -v "127.0.0.1\|{{ ansible_default_ipv4.address }}" | head -10)
        send_security_alert "High Number of External Connections" "Detected $external_connections external connections:\n$connection_details" "WARNING"
        network_issues=$((network_issues + 1))
    fi
    
    # Check for port scans
    local port_scan_attempts
    port_scan_attempts=$(grep "$(date '+%b %d')" /var/log/ufw.log 2>/dev/null | grep "BLOCK" | wc -l)
    
    if [ "$port_scan_attempts" -gt 100 ]; then
        local scan_sources
        scan_sources=$(grep "$(date '+%b %d')" /var/log/ufw.log 2>/dev/null | grep "BLOCK" | \
                      grep -oE 'SRC=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | \
                      sort | uniq -c | sort -nr | head -5)
        send_security_alert "Port Scan Activity Detected" "Blocked $port_scan_attempts connection attempts. Top sources:\n$scan_sources" "WARNING"
        network_issues=$((network_issues + 1))
    fi
    
    log_message "Network security checks: $network_issues issues found"
}

# Check service security
check_service_security() {
    local service_issues=0
    
    # Check PowerDNS configuration security
    if [ -f "{{ powerdns_config_file }}" ]; then
        local config_perms
        config_perms=$(stat -c "%a" {{ powerdns_config_file }})
        
        if [ "$config_perms" != "640" ]; then
            send_security_alert "PowerDNS Configuration Permissions" "PowerDNS config file has incorrect permissions: $config_perms (should be 640)" "WARNING"
            service_issues=$((service_issues + 1))
        fi
    fi
    
    # Check for running services that shouldn't be there
    local unwanted_services=("telnet" "ftp" "rsh" "rlogin")
    for service in "${unwanted_services[@]}"; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            send_security_alert "Unwanted Service Running" "Service '$service' is running and should be disabled" "HIGH"
            service_issues=$((service_issues + 1))
        fi
    done
    
    # Check fail2ban status
    if command -v fail2ban-client >/dev/null 2>&1; then
        if ! systemctl is-active --quiet fail2ban; then
            send_security_alert "Fail2ban Service Down" "Fail2ban intrusion prevention service is not running" "HIGH"
            service_issues=$((service_issues + 1))
        else
            # Check fail2ban jails
            local banned_ips
            banned_ips=$(fail2ban-client status 2>/dev/null | grep "Currently banned:" | awk '{print $3}')
            
            if [ "$banned_ips" -gt 10 ]; then
                send_security_alert "High Number of Banned IPs" "Fail2ban has banned $banned_ips IP addresses" "WARNING"
            fi
        fi
    fi
    
    log_message "Service security checks: $service_issues issues found"
}

# Check log security
check_log_security() {
    local log_issues=0
    
    # Check for log tampering
    local log_files=("/var/log/auth.log" "/var/log/syslog" "/var/log/powerdns/*.log")
    
    for log_pattern in "${log_files[@]}"; do
        for log_file in $log_pattern; do
            if [ -f "$log_file" ]; then
                local log_perms
                log_perms=$(stat -c "%a" "$log_file")
                
                # Check if logs are world-writable
                if [ $((log_perms & 002)) -ne 0 ]; then
                    send_security_alert "Log File Security Issue" "Log file $log_file is world-writable (permissions: $log_perms)" "HIGH"
                    log_issues=$((log_issues + 1))
                fi
            fi
        done
    done
    
    # Check for gaps in logs (potential tampering)
    if [ -f /var/log/auth.log ]; then
        local log_gap
        log_gap=$(awk 'NR>1 {if ($1 != prev_date && $2 != prev_time) gap++} {prev_date=$1; prev_time=$2} END {print gap+0}' /var/log/auth.log)
        
        if [ "$log_gap" -gt 5 ]; then
            send_security_alert "Potential Log Tampering" "Detected $log_gap time gaps in authentication logs" "HIGH"
            log_issues=$((log_issues + 1))
        fi
    fi
    
    log_message "Log security checks: $log_issues issues found"
}

# Generate security report
generate_security_report() {
    local report_file="/var/log/security-report-$(date +%Y%m%d).log"
    
    {
        echo "PowerDNS Security Report - $HOSTNAME"
        echo "Generated: $TIMESTAMP"
        echo "========================================"
        echo ""
        
        echo "System Status:"
        echo "- PowerDNS Service: $(systemctl is-active {{ powerdns_service_name }})"
        echo "- MySQL Service: $(systemctl is-active {{ mysql_service_name }})"
        echo "- Firewall Status: $(if command -v ufw >/dev/null; then ufw status | head -1; elif command -v firewall-cmd >/dev/null; then firewall-cmd --state; else echo "Unknown"; fi)"
        echo "- Fail2ban Status: $(systemctl is-active fail2ban 2>/dev/null || echo "Not installed")"
        echo ""
        
        echo "Security Metrics:"
        echo "- Failed logins today: $(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)"
        echo "- Blocked connections: $(grep "$(date '+%b %d')" /var/log/ufw.log 2>/dev/null | grep "BLOCK" | wc -l)"
        echo "- Active connections: $(netstat -an | grep ESTABLISHED | wc -l)"
        echo "- DNS queries today: $(grep "$(date '+%Y-%m-%d')" /var/log/powerdns/*.log 2>/dev/null | wc -l)"
        echo ""
        
        echo "Recent Security Events:"
        tail -20 "$LOGFILE" 2>/dev/null | grep "SECURITY ALERT" || echo "No recent security alerts"
        
    } > "$report_file"
    
    log_message "Security report generated: $report_file"
}

# Main security monitoring function
main() {
    log_message "Starting security monitoring check"
    
    check_failed_logins
    check_suspicious_dns
    check_system_integrity
    check_network_security
    check_service_security
    check_log_security
    
    # Generate daily report
    if [ "$(date +%H)" = "06" ]; then
        generate_security_report
    fi
    
    log_message "Security monitoring check completed"
}

# Ensure log file exists and has proper permissions
touch "$LOGFILE"
chmod 640 "$LOGFILE"

# Run main function
main "$@"
