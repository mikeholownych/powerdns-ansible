#!/bin/bash
# AIDE Integrity Check Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOGFILE="/var/log/aide/aide-check.log"
REPORT_FILE="/var/log/aide/aide-report-$(date +%Y%m%d-%H%M%S).log"
HOSTNAME=$(hostname)

# Ensure log directory exists
mkdir -p /var/log/aide

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to send alert
send_alert() {
    local subject="$1"
    local message="$2"
    
    log_message "ALERT: $subject"
    
    # Send email alert if configured
    {% if alert_email is defined %}
    {
        echo "AIDE Integrity Check Alert - $HOSTNAME"
        echo "Timestamp: $TIMESTAMP"
        echo "Subject: $subject"
        echo ""
        echo "Message:"
        echo "$message"
        echo ""
        echo "Full report available at: $REPORT_FILE"
    } | mail -s "AIDE Alert: $subject" {{ alert_email }}
    {% endif %}
    
    # Send webhook alert if configured
    {% if alert_webhook_url is defined %}
    curl -X POST -H "Content-Type: application/json" \
         -d "{\"text\":\"AIDE Alert [$HOSTNAME]: $subject\", \"timestamp\":\"$TIMESTAMP\", \"details\":\"$message\"}" \
         {{ alert_webhook_url }} >/dev/null 2>&1
    {% endif %}
}

# Main AIDE check function
run_aide_check() {
    log_message "Starting AIDE integrity check"
    
    # Check if AIDE database exists
    if [ ! -f /var/lib/aide/aide.db ]; then
        log_message "ERROR: AIDE database not found. Run aide --init first."
        send_alert "AIDE Database Missing" "AIDE database not found on $HOSTNAME. System integrity cannot be verified."
        exit 1
    fi
    
    # Run AIDE check
    if aide --check > "$REPORT_FILE" 2>&1; then
        log_message "AIDE check completed successfully - No changes detected"
        
        # Clean up old successful reports (keep last 7 days)
        find /var/log/aide -name "aide-report-*.log" -mtime +7 -delete 2>/dev/null
        
    else
        local exit_code=$?
        
        case $exit_code in
            1)
                log_message "WARNING: AIDE detected file system changes"
                
                # Count changes
                local added_files
                local removed_files
                local changed_files
                
                added_files=$(grep -c "^f+++++++++++" "$REPORT_FILE" 2>/dev/null || echo "0")
                removed_files=$(grep -c "^f----------" "$REPORT_FILE" 2>/dev/null || echo "0")
                changed_files=$(grep -c "^f\.\.\.\.\.\.\.\.\.\." "$REPORT_FILE" 2>/dev/null || echo "0")
                
                local summary="Added: $added_files, Removed: $removed_files, Changed: $changed_files files"
                
                log_message "Changes detected: $summary"
                
                # Send alert for significant changes
                if [ "$added_files" -gt 10 ] || [ "$removed_files" -gt 5 ] || [ "$changed_files" -gt 20 ]; then
                    send_alert "Significant File System Changes Detected" "AIDE detected significant changes on $HOSTNAME: $summary. Review report: $REPORT_FILE"
                else
                    send_alert "File System Changes Detected" "AIDE detected changes on $HOSTNAME: $summary. Review report: $REPORT_FILE"
                fi
                
                # Extract critical changes
                if grep -q "/etc\|/bin\|/sbin\|/usr/bin\|/usr/sbin\|{{ powerdns_config_dir }}" "$REPORT_FILE"; then
                    log_message "CRITICAL: Changes detected in critical system directories"
                    send_alert "CRITICAL: System File Changes" "Critical system files have been modified on $HOSTNAME. Immediate review required."
                fi
                ;;
            2)
                log_message "ERROR: AIDE configuration error"
                send_alert "AIDE Configuration Error" "AIDE configuration error on $HOSTNAME. Check /etc/aide/aide.conf"
                ;;
            3)
                log_message "ERROR: AIDE database error"
                send_alert "AIDE Database Error" "AIDE database error on $HOSTNAME. Database may be corrupted."
                ;;
            *)
                log_message "ERROR: AIDE check failed with exit code $exit_code"
                send_alert "AIDE Check Failed" "AIDE integrity check failed on $HOSTNAME with exit code $exit_code"
                ;;
        esac
    fi
    
    # Log file sizes for monitoring
    local db_size
    local report_size
    
    db_size=$(du -h /var/lib/aide/aide.db 2>/dev/null | cut -f1)
    report_size=$(du -h "$REPORT_FILE" 2>/dev/null | cut -f1)
    
    log_message "Database size: ${db_size:-unknown}, Report size: ${report_size:-unknown}"
    
    # Compress old reports
    find /var/log/aide -name "aide-report-*.log" -mtime +1 -not -name "*.gz" -exec gzip {} \; 2>/dev/null
    
    log_message "AIDE integrity check completed"
}

# Check system load before running
load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk -F',' '{print $1}' | xargs)
cpu_cores=$(nproc)
load_threshold=$((cpu_cores * 2))

if (( $(echo "$load_avg > $load_threshold" | bc -l) )); then
    log_message "WARNING: High system load ($load_avg), skipping AIDE check"
    exit 0
fi

# Run the check
run_aide_check

# Exit with appropriate code
exit 0
