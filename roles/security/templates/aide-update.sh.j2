#!/bin/bash
# AIDE Database Update Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOGFILE="/var/log/aide/aide-update.log"
HOSTNAME=$(hostname)

# Ensure log directory exists
mkdir -p /var/log/aide

# Function to log messages
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
}

# Function to send notification
send_notification() {
    local subject="$1"
    local message="$2"
    
    log_message "NOTIFICATION: $subject"
    
    # Send email notification if configured
    {% if alert_email is defined %}
    {
        echo "AIDE Database Update Notification - $HOSTNAME"
        echo "Timestamp: $TIMESTAMP"
        echo "Subject: $subject"
        echo ""
        echo "Message:"
        echo "$message"
    } | mail -s "AIDE Update: $subject" {{ alert_email }}
    {% endif %}
}

# Main update function
update_aide_database() {
    log_message "Starting AIDE database update"
    
    # Check if current database exists
    if [ ! -f /var/lib/aide/aide.db ]; then
        log_message "ERROR: Current AIDE database not found"
        send_notification "AIDE Database Missing" "Current AIDE database not found on $HOSTNAME. Cannot perform update."
        exit 1
    fi
    
    # Create backup of current database
    local backup_file="/var/lib/aide/aide.db.backup.$(date +%Y%m%d-%H%M%S)"
    if cp /var/lib/aide/aide.db "$backup_file"; then
        log_message "Current database backed up to: $backup_file"
    else
        log_message "ERROR: Failed to backup current database"
        exit 1
    fi
    
    # Check system load before running
    local load_avg
    local cpu_cores
    local load_threshold
    
    load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk -F',' '{print $1}' | xargs)
    cpu_cores=$(nproc)
    load_threshold=$((cpu_cores * 2))
    
    if (( $(echo "$load_avg > $load_threshold" | bc -l) )); then
        log_message "WARNING: High system load ($load_avg), postponing AIDE update"
        send_notification "AIDE Update Postponed" "AIDE database update postponed due to high system load ($load_avg) on $HOSTNAME"
        exit 0
    fi
    
    # Update the database
    log_message "Updating AIDE database (this may take several minutes)..."
    
    local start_time
    local end_time
    local duration
    
    start_time=$(date +%s)
    
    if aide --update > /var/log/aide/aide-update-$(date +%Y%m%d-%H%M%S).log 2>&1; then
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        
        log_message "AIDE database update completed successfully in ${duration} seconds"
        
        # Move new database to active location
        if [ -f /var/lib/aide/aide.db.new ]; then
            if mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db; then
                log_message "New database activated successfully"
                
                # Get database size
                local db_size
                db_size=$(du -h /var/lib/aide/aide.db | cut -f1)
                log_message "New database size: $db_size"
                
                send_notification "AIDE Database Updated Successfully" "AIDE database updated successfully on $HOSTNAME. Duration: ${duration}s, Size: $db_size"
                
                # Clean up old backups (keep last 4 weeks)
                find /var/lib/aide -name "aide.db.backup.*" -mtime +28 -delete 2>/dev/null
                log_message "Old database backups cleaned up"
                
            else
                log_message "ERROR: Failed to activate new database"
                send_notification "AIDE Database Activation Failed" "Failed to activate new AIDE database on $HOSTNAME"
                exit 1
            fi
        else
            log_message "ERROR: New database file not found"
            send_notification "AIDE Database Update Failed" "New AIDE database file not found on $HOSTNAME"
            exit 1
        fi
        
    else
        local exit_code=$?
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        
        log_message "ERROR: AIDE database update failed with exit code $exit_code after ${duration} seconds"
        send_notification "AIDE Database Update Failed" "AIDE database update failed on $HOSTNAME with exit code $exit_code"
        
        # Restore backup if update failed
        if [ -f "$backup_file" ]; then
            if cp "$backup_file" /var/lib/aide/aide.db; then
                log_message "Original database restored from backup"
            else
                log_message "CRITICAL: Failed to restore original database"
                send_notification "CRITICAL: AIDE Database Restore Failed" "Failed to restore original AIDE database on $HOSTNAME after update failure"
            fi
        fi
        
        exit 1
    fi
    
    # Verify the new database
    if aide --check --config=/etc/aide/aide.conf > /dev/null 2>&1; then
        log_message "New database verification successful"
    else
        log_message "WARNING: New database verification failed"
        send_notification "AIDE Database Verification Warning" "New AIDE database verification failed on $HOSTNAME"
    fi
    
    # Set proper permissions
    chown root:root /var/lib/aide/aide.db
    chmod 600 /var/lib/aide/aide.db
    
    log_message "AIDE database update process completed"
}

# Check if another AIDE process is running
if pgrep -f "aide" > /dev/null; then
    log_message "Another AIDE process is running, exiting"
    exit 0
fi

# Check available disk space
available_space=$(df /var/lib/aide | tail -1 | awk '{print $4}')
required_space=1048576  # 1GB in KB

if [ "$available_space" -lt "$required_space" ]; then
    log_message "ERROR: Insufficient disk space for AIDE update"
    send_notification "AIDE Update Failed - Disk Space" "Insufficient disk space for AIDE database update on $HOSTNAME"
    exit 1
fi

# Run the update
update_aide_database

# Clean up old log files
find /var/log/aide -name "aide-update-*.log" -mtime +30 -delete 2>/dev/null

exit 0
