#!/bin/bash
# PowerDNS Backup Script - Generated by Ansible
# Backs up PowerDNS configuration and database

set -euo pipefail

# Configuration
BACKUP_DIR="{{ powerdns_backup_dir }}"
CONFIG_FILE="{{ powerdns_config_file }}"
DB_NAME="{{ powerdns_db_name }}"
DB_USER="{{ powerdns_db_user }}"
DB_HOST="{{ powerdns_db_host }}"
RETENTION_DAYS="{{ backup_config.retention_days | default(30) }}"
COMPRESS="{{ backup_config.compress | default(true) | lower }}"
LOG_FILE="/var/log/powerdns-backup.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${GREEN}[INFO]${NC} $1"
    log "INFO: $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    log "WARNING: $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log "ERROR: $1"
}

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Generate timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_PREFIX="powerdns_backup_${TIMESTAMP}"

info "Starting PowerDNS backup - $TIMESTAMP"

# Backup configuration file
if [[ -f "$CONFIG_FILE" ]]; then
    cp "$CONFIG_FILE" "${BACKUP_DIR}/${BACKUP_PREFIX}_pdns.conf"
    info "Configuration file backed up"
else
    warning "Configuration file not found: $CONFIG_FILE"
fi

# Backup database
info "Backing up PowerDNS database..."
if command -v mysqldump &> /dev/null; then
    # Create MySQL config file for authentication
    MYSQL_CONFIG=$(mktemp)
    cat > "$MYSQL_CONFIG" << EOF
[client]
user={{ powerdns_db_user }}
password={{ powerdns_db_password }}
host={{ powerdns_db_host }}
EOF
    chmod 600 "$MYSQL_CONFIG"
    
    # Perform database backup
    if mysqldump --defaults-file="$MYSQL_CONFIG" \
                 --single-transaction \
                 --routines \
                 --triggers \
                 "$DB_NAME" > "${BACKUP_DIR}/${BACKUP_PREFIX}_database.sql"; then
        info "Database backup completed"
    else
        error "Database backup failed"
        rm -f "$MYSQL_CONFIG"
        exit 1
    fi
    
    rm -f "$MYSQL_CONFIG"
else
    error "mysqldump not found"
    exit 1
fi

# Compress backups if enabled
if [[ "$COMPRESS" == "true" ]]; then
    info "Compressing backup files..."
    cd "$BACKUP_DIR"
    
    if command -v gzip &> /dev/null; then
        gzip "${BACKUP_PREFIX}_pdns.conf" 2>/dev/null || true
        gzip "${BACKUP_PREFIX}_database.sql" 2>/dev/null || true
        info "Backup files compressed"
    else
        warning "gzip not available, skipping compression"
    fi
fi

# Create backup manifest
cat > "${BACKUP_DIR}/${BACKUP_PREFIX}_manifest.txt" << EOF
PowerDNS Backup Manifest
========================
Backup Date: $(date)
Server: $(hostname)
Server Role: {{ server_role | default('unknown') }}
PowerDNS Version: $(pdns_server --version 2>/dev/null | head -1 || echo "unknown")

Files in this backup:
- ${BACKUP_PREFIX}_pdns.conf$([ "$COMPRESS" == "true" ] && echo ".gz" || echo "")
- ${BACKUP_PREFIX}_database.sql$([ "$COMPRESS" == "true" ] && echo ".gz" || echo "")
- ${BACKUP_PREFIX}_manifest.txt

Backup Size: $(du -sh ${BACKUP_DIR}/${BACKUP_PREFIX}* | awk '{sum+=$1} END {print sum}' || echo "unknown")
EOF

# Clean up old backups
info "Cleaning up backups older than $RETENTION_DAYS days..."
find "$BACKUP_DIR" -name "powerdns_backup_*" -type f -mtime +$RETENTION_DAYS -delete 2>/dev/null || true

# Calculate backup statistics
BACKUP_COUNT=$(ls -1 "$BACKUP_DIR"/powerdns_backup_* 2>/dev/null | wc -l)
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo "unknown")

info "Backup completed successfully"
info "Total backups: $BACKUP_COUNT"
info "Backup directory size: $BACKUP_SIZE"

# Send notification if configured
{% if common_alert_email is defined %}
if command -v mail &> /dev/null; then
    echo "PowerDNS backup completed successfully on $(hostname) at $(date)" | \
    mail -s "PowerDNS Backup Success - $(hostname)" "{{ common_alert_email }}"
fi
{% endif %}

log "Backup process completed successfully"
