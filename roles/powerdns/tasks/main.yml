---
# PowerDNS installation and configuration

- name: Install PowerDNS packages
  package:
    name: "{{ powerdns_packages[ansible_os_family] }}"
    state: present

- name: Ensure PowerDNS MySQL backend .so exists
  stat:
    path: /usr/lib/x86_64-linux-gnu/pdns/libmysqlbackend.so
  register: pdns_backend_lib

- name: Fail if PowerDNS MySQL backend is missing
  fail:
    msg: libmysqlbackend.so is missing â€” pdns-backend-mysql may have failed to install
  when: not pdns_backend_lib.stat.exists

- name: Ensure PowerDNS MySQL backend is installed
  ansible.builtin.apt:
    name: pdns-backend-mysql
    state: present

- name: Ensure PowerDNS config directory exists
  ansible.builtin.file:
    path: /etc/powerdns/conf.d
    state: directory
    owner: pdns
    group: pdns
    mode: '0755'

- name: Stop PowerDNS service for initial configuration
  systemd:
    name: "{{ powerdns_service_name }}"
    state: stopped
  ignore_errors: yes

- name: Create PowerDNS configuration backup
  copy:
    src: "{{ powerdns_config_file }}"
    dest: "{{ powerdns_backup_dir }}/pdns.conf.backup.{{ ansible_date_time.epoch }}"
    remote_src: yes
    owner: root
    group: root
    mode: '0640'
  when: ansible_stat.stat.exists is defined and ansible_stat.stat.exists
  ignore_errors: yes

- name: Check if PowerDNS config exists
  stat:
    path: "{{ powerdns_config_file }}"
  register: pdns_config_stat

- name: Generate PowerDNS configuration
  template:
    src: pdns.conf.j2
    dest: "{{ powerdns_config_file }}"
    owner: root
    group: "{{ powerdns_group }}"
    mode: '0640'
    backup: yes
  notify: restart powerdns

- name: Create PowerDNS systemd override directory
  file:
    path: /etc/systemd/system/{{ powerdns_service_name }}.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Configure PowerDNS systemd service overrides
  template:
    src: pdns-override.conf.j2
    dest: /etc/systemd/system/{{ powerdns_service_name }}.service.d/override.conf
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd
    - restart powerdns

- name: Enable and start PowerDNS service
  systemd:
    name: "{{ powerdns_service_name }}"
    enabled: yes
    state: started
    daemon_reload: yes

- name: Wait for PowerDNS to start
  wait_for:
    port: 53
    host: "{{ ansible_default_ipv4.address }}"
    delay: 5
    timeout: 30

- name: Wait for PowerDNS API to start
  wait_for:
    port: "{{ powerdns_webserver_port | default(8081) }}"
    host: "{{ ansible_default_ipv4.address }}"
    delay: 5
    timeout: 30
  when: powerdns_api_readonly is defined

- name: Check PowerDNS service status
  systemd:
    name: "{{ powerdns_service_name }}"
  register: powerdns_service_status

- name: Display PowerDNS service status
  debug:
    msg: "PowerDNS service is {{ powerdns_service_status.status.ActiveState }}"

- name: Dry-run PowerDNS config check before enable/start
  command: pdns_server --daemon=no --guardian=no --config-check
  register: pdns_config_check
  failed_when: pdns_config_check.rc != 0
  changed_when: false

- name: Display PowerDNS config validation result
  debug:
    msg: "PowerDNS configuration validation: {{ 'PASSED' if pdns_config_check.rc == 0 else 'FAILED' }}"

- name: Create initial zones for primary server
  include_tasks: create_zones.yml
  when: server_role == 'primary'

- name: Configure secondary server zones
  include_tasks: configure_secondary.yml
  when: server_role == 'secondary'

- name: Install PowerDNS utilities
  package:
    name:
      - pdns-tools
    state: present
  ignore_errors: yes

- name: Create PowerDNS management scripts
  template:
    src: "{{ item }}.j2"
    dest: "/usr/local/bin/{{ item }}"
    owner: root
    group: root
    mode: '0755'
  loop:
    - pdns-zone-manager.sh
    - pdns-stats.sh
    - pdns-maintenance.sh

- name: Configure PowerDNS log rotation
  template:
    src: powerdns-logs.logrotate.j2
    dest: /etc/logrotate.d/powerdns-logs
    owner: root
    group: root
    mode: '0644'

- name: Create PowerDNS monitoring user (if API enabled)
  mysql_user:
    name: pdns_monitor
    password: "{{ monitoring_api_token | default('monitor123') }}"
    priv: "{{ powerdns_db_name }}.*:SELECT"
    host: localhost
    state: present
    login_user: root
    login_password: "{{ mysql_root_password | default(omit) }}"
  when: monitoring_config.enabled | default(true)

- name: Verify PowerDNS is responding to queries
  command: dig @{{ ansible_default_ipv4.address }} localhost
  register: dns_test
  failed_when: dns_test.rc != 0
  changed_when: false
  ignore_errors: yes

- name: Display DNS test result
  debug:
    msg: "DNS query test: {{ 'PASSED' if dns_test.rc == 0 else 'FAILED' }}"

#################################
# DNSSEC Configuration
#################################

- name: Install DNSSEC utilities
  package:
    name:
      - pdns-tools
      - bind9-dnsutils
    state: present

- name: Enable DNSSEC for primary domains
  command: pdnsutil secure-zone {{ item }}
  loop: "{{ primary_domains }}"
  register: dnssec_enable
  failed_when: dnssec_enable.rc != 0 and 'already secured' not in dnssec_enable.stderr
  changed_when: "'secured' in dnssec_enable.stdout"
  when: 
    - server_role == 'primary'
    - dnssec_enabled | default(true)

- name: Generate DNSSEC keys for domains
  command: pdnsutil generate-zone-key {{ item }} ksk
  loop: "{{ primary_domains }}"
  register: dnssec_ksk
  failed_when: dnssec_ksk.rc != 0 and 'already has keys' not in dnssec_ksk.stderr
  changed_when: "'Generated' in dnssec_ksk.stdout"
  when: 
    - server_role == 'primary'
    - dnssec_enabled | default(true)

- name: Generate DNSSEC ZSK keys for domains
  command: pdnsutil generate-zone-key {{ item }} zsk
  loop: "{{ primary_domains }}"
  register: dnssec_zsk
  failed_when: dnssec_zsk.rc != 0 and 'already has keys' not in dnssec_zsk.stderr
  changed_when: "'Generated' in dnssec_zsk.stdout"
  when: 
    - server_role == 'primary'
    - dnssec_enabled | default(true)

- name: Activate DNSSEC keys
  command: pdnsutil activate-zone-key {{ item }} all
  loop: "{{ primary_domains }}"
  register: dnssec_activate
  changed_when: "'Activated' in dnssec_activate.stdout"
  when: 
    - server_role == 'primary'
    - dnssec_enabled | default(true)

- name: Set up automatic DNSSEC key rollover
  cron:
    name: "DNSSEC Key Rollover for {{ item }}"
    cron_file: "dnssec-rollover-{{ item | replace('.', '-') }}"
    user: root
    minute: "0"
    hour: "3"
    day: "1"
    job: "/usr/bin/pdnsutil generate-zone-key {{ item }} zsk && /usr/bin/pdnsutil activate-zone-key {{ item }} all"
    state: "{{ 'present' if dnssec_enabled | default(true) else 'absent' }}"
  loop: "{{ primary_domains }}"
  when: server_role == 'primary'

- name: Verify DNSSEC status
  command: pdnsutil show-zone {{ item }}
  loop: "{{ primary_domains }}"
  register: dnssec_status
  changed_when: false
  when: 
    - server_role == 'primary'
    - dnssec_enabled | default(true)

- name: Display DNSSEC status
  debug:
    msg: "DNSSEC status for {{ item.item }}: {{ 'ENABLED' if 'Secured: 1' in item.stdout else 'DISABLED' }}"
  loop: "{{ dnssec_status.results }}"
  when: 
    - server_role == 'primary'
    - dnssec_enabled | default(true)
    - dnssec_status is defined

#################################
# Zone Validation
#################################

- name: Create zone validation script
  template:
    src: zone-validator.sh.j2
    dest: /usr/local/bin/zone-validator.sh
    owner: root
    group: root
    mode: '0755'

- name: Validate zones after creation
  command: /usr/local/bin/zone-validator.sh {{ item }}
  loop: "{{ primary_domains }}"
  register: zone_validation
  failed_when: zone_validation.rc != 0
  changed_when: false
  when: server_role == 'primary'

- name: Display zone validation results
  debug:
    msg: "Zone validation for {{ item.item }}: {{ 'PASSED' if item.rc == 0 else 'FAILED' }}"
  loop: "{{ zone_validation.results }}"
  when: 
    - server_role == 'primary'
    - zone_validation is defined

#################################
# API Configuration and Security
#################################

- name: Create PowerDNS API management script
  template:
    src: pdns-api-manager.sh.j2
    dest: /usr/local/bin/pdns-api-manager.sh
    owner: root
    group: root
    mode: '0755'
  when: powerdns_api_readonly is defined

- name: Test PowerDNS API connectivity
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1/servers"
    method: GET
    headers:
      X-API-Key: "{{ powerdns_api_key }}"
    status_code: 200
  register: api_test
  when: powerdns_api_readonly is defined
  ignore_errors: yes

- name: Display API test result
  debug:
    msg: "PowerDNS API test: {{ 'PASSED' if api_test.status == 200 else 'FAILED' }}"
  when: powerdns_api_readonly is defined
