#!/bin/bash
# PowerDNS Zone Management Script - Generated by Ansible
# Provides easy zone management functionality

set -euo pipefail

# Configuration
DB_NAME="{{ powerdns_db_name }}"
DB_USER="{{ powerdns_db_user }}"
DB_HOST="{{ powerdns_db_host }}"
API_KEY="{{ powerdns_api_key }}"
API_URL="http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# MySQL connection
mysql_query() {
    local query="$1"
    mysql -h "$DB_HOST" -u "$DB_USER" -p"{{ powerdns_db_password }}" -D "$DB_NAME" -sN -e "$query"
}

# API call
api_call() {
    local method="$1"
    local endpoint="$2"
    local data="${3:-}"
    
    if [[ -n "$data" ]]; then
        curl -s -X "$method" -H "X-API-Key: $API_KEY" -H "Content-Type: application/json" \
             -d "$data" "$API_URL/$endpoint"
    else
        curl -s -X "$method" -H "X-API-Key: $API_KEY" "$API_URL/$endpoint"
    fi
}

# Show usage
show_usage() {
    cat << EOF
PowerDNS Zone Manager

Usage: $0 <command> [options]

Commands:
    list-zones              List all zones
    create-zone <name>      Create a new zone
    delete-zone <name>      Delete a zone
    list-records <zone>     List records in a zone
    add-record <zone> <name> <type> <content> [ttl] [priority]
    delete-record <zone> <name> <type>
    update-serial <zone>    Update zone serial number
    check-zone <zone>       Check zone configuration
    export-zone <zone>      Export zone to BIND format
    import-zone <file>      Import zone from BIND format
    stats                   Show zone statistics
    help                    Show this help

Examples:
    $0 list-zones
    $0 create-zone example.com
    $0 add-record example.com www A 192.168.1.100 3600
    $0 delete-record example.com www A
    $0 export-zone example.com > example.com.zone

EOF
}

# List all zones
list_zones() {
    info "Listing all zones..."
    echo ""
    printf "%-30s %-10s %-15s %-20s\n" "Zone Name" "Type" "Serial" "Last Check"
    printf "%-30s %-10s %-15s %-20s\n" "----------" "----" "------" "----------"
    
    mysql_query "
        SELECT 
            d.name,
            d.type,
            COALESCE(
                (SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(content, ' ', 3), ' ', -1) 
                 FROM records r WHERE r.domain_id = d.id AND r.type = 'SOA' LIMIT 1), 
                'N/A'
            ) as serial,
            COALESCE(FROM_UNIXTIME(d.last_check), 'Never') as last_check
        FROM domains d 
        ORDER BY d.name;
    " | while IFS=$'\t' read -r name type serial last_check; do
        printf "%-30s %-10s %-15s %-20s\n" "$name" "$type" "$serial" "$last_check"
    done
}

# Create a new zone
create_zone() {
    local zone_name="$1"
    
    if [[ -z "$zone_name" ]]; then
        error "Zone name is required"
        exit 1
    fi
    
    info "Creating zone: $zone_name"
    
    # Check if zone already exists
    if mysql_query "SELECT COUNT(*) FROM domains WHERE name = '$zone_name';" | grep -q "1"; then
        error "Zone $zone_name already exists"
        exit 1
    fi
    
    # Create zone
    mysql_query "INSERT INTO domains (name, type, account) VALUES ('$zone_name', 'NATIVE', 'admin');"
    
    # Get domain ID
    local domain_id=$(mysql_query "SELECT id FROM domains WHERE name = '$zone_name';")
    
    # Create SOA record
    local serial=$(date +%Y%m%d01)
    local soa_content="ns1.$zone_name admin.$zone_name $serial 3600 1800 604800 86400"
    
    mysql_query "INSERT INTO records (domain_id, name, type, content, ttl, auth) VALUES ($domain_id, '$zone_name', 'SOA', '$soa_content', 3600, 1);"
    
    # Create NS records
    mysql_query "INSERT INTO records (domain_id, name, type, content, ttl, auth) VALUES ($domain_id, '$zone_name', 'NS', 'ns1.$zone_name', 3600, 1);"
    mysql_query "INSERT INTO records (domain_id, name, type, content, ttl, auth) VALUES ($domain_id, '$zone_name', 'NS', 'ns2.$zone_name', 3600, 1);"
    
    success "Zone $zone_name created successfully"
}

# Delete a zone
delete_zone() {
    local zone_name="$1"
    
    if [[ -z "$zone_name" ]]; then
        error "Zone name is required"
        exit 1
    fi
    
    warning "This will permanently delete zone: $zone_name"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Operation cancelled"
        exit 0
    fi
    
    # Get domain ID
    local domain_id=$(mysql_query "SELECT id FROM domains WHERE name = '$zone_name';" || echo "")
    
    if [[ -z "$domain_id" ]]; then
        error "Zone $zone_name not found"
        exit 1
    fi
    
    # Delete records first
    mysql_query "DELETE FROM records WHERE domain_id = $domain_id;"
    
    # Delete domain
    mysql_query "DELETE FROM domains WHERE id = $domain_id;"
    
    success "Zone $zone_name deleted successfully"
}

# List records in a zone
list_records() {
    local zone_name="$1"
    
    if [[ -z "$zone_name" ]]; then
        error "Zone name is required"
        exit 1
    fi
    
    info "Records for zone: $zone_name"
    echo ""
    printf "%-30s %-8s %-6s %-50s %-8s\n" "Name" "Type" "TTL" "Content" "Priority"
    printf "%-30s %-8s %-6s %-50s %-8s\n" "----" "----" "---" "-------" "--------"
    
    mysql_query "
        SELECT r.name, r.type, r.ttl, r.content, COALESCE(r.prio, 0)
        FROM records r 
        JOIN domains d ON r.domain_id = d.id 
        WHERE d.name = '$zone_name' 
        ORDER BY r.type, r.name;
    " | while IFS=$'\t' read -r name type ttl content prio; do
        printf "%-30s %-8s %-6s %-50s %-8s\n" "$name" "$type" "$ttl" "$content" "$prio"
    done
}

# Add a record
add_record() {
    local zone_name="$1"
    local record_name="$2"
    local record_type="$3"
    local record_content="$4"
    local record_ttl="${5:-3600}"
    local record_prio="${6:-0}"
    
    if [[ -z "$zone_name" || -z "$record_name" || -z "$record_type" || -z "$record_content" ]]; then
        error "Usage: add-record <zone> <name> <type> <content> [ttl] [priority]"
        exit 1
    fi
    
    # Get domain ID
    local domain_id=$(mysql_query "SELECT id FROM domains WHERE name = '$zone_name';" || echo "")
    
    if [[ -z "$domain_id" ]]; then
        error "Zone $zone_name not found"
        exit 1
    fi
    
    # Add record
    mysql_query "INSERT INTO records (domain_id, name, type, content, ttl, prio, auth) VALUES ($domain_id, '$record_name', '$record_type', '$record_content', $record_ttl, $record_prio, 1);"
    
    success "Record added: $record_name $record_type $record_content"
    
    # Update SOA serial if not SOA record
    if [[ "$record_type" != "SOA" ]]; then
        update_serial "$zone_name"
    fi
}

# Delete a record
delete_record() {
    local zone_name="$1"
    local record_name="$2"
    local record_type="$3"
    
    if [[ -z "$zone_name" || -z "$record_name" || -z "$record_type" ]]; then
        error "Usage: delete-record <zone> <name> <type>"
        exit 1
    fi
    
    # Get domain ID
    local domain_id=$(mysql_query "SELECT id FROM domains WHERE name = '$zone_name';" || echo "")
    
    if [[ -z "$domain_id" ]]; then
        error "Zone $zone_name not found"
        exit 1
    fi
    
    # Delete record
    local affected=$(mysql_query "DELETE FROM records WHERE domain_id = $domain_id AND name = '$record_name' AND type = '$record_type'; SELECT ROW_COUNT();" | tail -1)
    
    if [[ "$affected" -gt 0 ]]; then
        success "Record deleted: $record_name $record_type"
        update_serial "$zone_name"
    else
        warning "No matching record found"
    fi
}

# Update zone serial
update_serial() {
    local zone_name="$1"
    local new_serial=$(date +%Y%m%d%H)
    
    mysql_query "
        UPDATE records r 
        JOIN domains d ON r.domain_id = d.id 
        SET r.content = CONCAT(
            SUBSTRING_INDEX(r.content, ' ', 2), 
            ' $new_serial ', 
            SUBSTRING(r.content, LOCATE(' ', r.content, LOCATE(' ', r.content, LOCATE(' ', r.content) + 1) + 1) + 1)
        )
        WHERE d.name = '$zone_name' AND r.type = 'SOA';
    "
    
    info "Updated serial for $zone_name to $new_serial"
}

# Show statistics
show_stats() {
    info "PowerDNS Zone Statistics"
    echo ""
    
    local total_zones=$(mysql_query "SELECT COUNT(*) FROM domains;")
    local native_zones=$(mysql_query "SELECT COUNT(*) FROM domains WHERE type = 'NATIVE';")
    local slave_zones=$(mysql_query "SELECT COUNT(*) FROM domains WHERE type = 'SLAVE';")
    local total_records=$(mysql_query "SELECT COUNT(*) FROM records;")
    
    echo "Total Zones: $total_zones"
    echo "Native Zones: $native_zones"
    echo "Slave Zones: $slave_zones"
    echo "Total Records: $total_records"
    echo ""
    
    echo "Records by Type:"
    mysql_query "SELECT type, COUNT(*) FROM records GROUP BY type ORDER BY COUNT(*) DESC;" | \
    while IFS=$'\t' read -r type count; do
        printf "  %-10s: %s\n" "$type" "$count"
    done
}

# Main execution
case "${1:-help}" in
    "list-zones")
        list_zones
        ;;
    "create-zone")
        create_zone "${2:-}"
        ;;
    "delete-zone")
        delete_zone "${2:-}"
        ;;
    "list-records")
        list_records "${2:-}"
        ;;
    "add-record")
        add_record "${2:-}" "${3:-}" "${4:-}" "${5:-}" "${6:-}" "${7:-}"
        ;;
    "delete-record")
        delete_record "${2:-}" "${3:-}" "${4:-}"
        ;;
    "update-serial")
        update_serial "${2:-}"
        ;;
    "stats")
        show_stats
        ;;
    "help"|*)
        show_usage
        ;;
esac
