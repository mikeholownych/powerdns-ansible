#!/bin/bash
# PowerDNS Statistics Script - Generated by Ansible

set -euo pipefail

# Configuration
API_KEY="{{ powerdns_api_key }}"
API_URL="http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1"
DB_NAME="{{ powerdns_db_name }}"
DB_USER="{{ powerdns_db_user }}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
banner() { echo -e "${CYAN}[STATS]${NC} $1"; }

# API call
api_call() {
    local endpoint="$1"
    curl -s -H "X-API-Key: $API_KEY" "$API_URL/$endpoint" 2>/dev/null || echo "{}"
}

# MySQL query
mysql_query() {
    local query="$1"
    mysql -h "{{ powerdns_db_host }}" -u "$DB_USER" -p"{{ powerdns_db_password }}" -D "$DB_NAME" -sN -e "$query" 2>/dev/null || echo ""
}

# Get system stats
get_system_stats() {
    banner "=== System Statistics ==="
    echo "Hostname: $(hostname)"
    echo "Server Role: {{ server_role }}"
    echo "IP Address: {{ ansible_default_ipv4.address }}"
    echo "Uptime: $(uptime -p 2>/dev/null || uptime)"
    echo "Load Average: $(cat /proc/loadavg | cut -d' ' -f1-3)"
    
    # Memory usage
    if command -v free &>/dev/null; then
        local mem_info=$(free -h | grep Mem)
        echo "Memory: $(echo $mem_info | awk '{print $3"/"$2" ("$3/$2*100"%)"}')"
    fi
    
    # Disk usage
    local disk_usage=$(df -h /etc/powerdns | tail -1 | awk '{print $5}')
    echo "Disk Usage: $disk_usage"
    echo ""
}

# Get PowerDNS service stats
get_service_stats() {
    banner "=== PowerDNS Service Statistics ==="
    
    # Service status
    if systemctl is-active --quiet pdns; then
        success "Service Status: Running"
    else
        error "Service Status: Not Running"
    fi
    
    # Service uptime
    local start_time=$(systemctl show pdns --property=ActiveEnterTimestamp --value 2>/dev/null || echo "unknown")
    if [[ "$start_time" != "unknown" ]]; then
        echo "Service Started: $start_time"
    fi
    
    # Process info
    local pdns_pid=$(pgrep pdns_server 2>/dev/null || echo "")
    if [[ -n "$pdns_pid" ]]; then
        echo "Process ID: $pdns_pid"
        
        # Memory usage
        local mem_usage=$(ps -p $pdns_pid -o rss= 2>/dev/null || echo "0")
        echo "Memory Usage: $((mem_usage / 1024)) MB"
        
        # CPU usage
        local cpu_usage=$(ps -p $pdns_pid -o %cpu= 2>/dev/null || echo "0")
        echo "CPU Usage: ${cpu_usage}%"
    fi
    echo ""
}

# Get database stats
get_database_stats() {
    banner "=== Database Statistics ==="
    
    local total_zones=$(mysql_query "SELECT COUNT(*) FROM domains;" || echo "0")
    local native_zones=$(mysql_query "SELECT COUNT(*) FROM domains WHERE type = 'NATIVE';" || echo "0")
    local slave_zones=$(mysql_query "SELECT COUNT(*) FROM domains WHERE type = 'SLAVE';" || echo "0")
    local total_records=$(mysql_query "SELECT COUNT(*) FROM records;" || echo "0")
    
    echo "Total Zones: $total_zones"
    echo "Native Zones: $native_zones"
    echo "Slave Zones: $slave_zones"
    echo "Total Records: $total_records"
    
    if [[ "$total_records" -gt 0 ]]; then
        echo ""
        echo "Records by Type:"
        mysql_query "SELECT type, COUNT(*) FROM records GROUP BY type ORDER BY COUNT(*) DESC;" | \
        while IFS=$'\t' read -r type count; do
            printf "  %-10s: %s\n" "$type" "$count"
        done
    fi
    echo ""
}

# Get API stats
get_api_stats() {
    banner "=== API Statistics ==="
    
    # Test API connectivity
    local api_response=$(api_call "servers")
    if echo "$api_response" | grep -q "localhost"; then
        success "API Status: Responding"
        
        # Get server statistics
        local stats=$(api_call "servers/localhost/statistics")
        if [[ -n "$stats" ]] && [[ "$stats" != "{}" ]]; then
            echo ""
            echo "Query Statistics:"
            echo "$stats" | jq -r '.[] | select(.name | contains("query")) | "\(.name): \(.value)"' 2>/dev/null | head -10 || echo "Statistics parsing failed"
        fi
    else
        warning "API Status: Not responding or not configured"
    fi
    echo ""
}

# Get network stats
get_network_stats() {
    banner "=== Network Statistics ==="
    
    # Check if DNS ports are listening
    if ss -tuln | grep -q ":53 "; then
        success "DNS Port 53: Listening"
    else
        error "DNS Port 53: Not listening"
    fi
    
    # Check API port
    local api_port="{{ powerdns_webserver_port | default(8081) }}"
    if ss -tuln | grep -q ":$api_port "; then
        success "API Port $api_port: Listening"
    else
        warning "API Port $api_port: Not listening"
    fi
    
    # Network connections
    local tcp_connections=$(ss -t | grep -c ":53" 2>/dev/null || echo "0")
    echo "Active DNS TCP Connections: $tcp_connections"
    
    # Test DNS resolution
    local dns_test=$(dig @{{ ansible_default_ipv4.address }} localhost +short +time=5 2>/dev/null || echo "")
    if [[ -n "$dns_test" ]]; then
        success "DNS Resolution Test: Passed"
    else
        warning "DNS Resolution Test: Failed (may be normal if no zones configured)"
    fi
    echo ""
}

# Get performance stats
get_performance_stats() {
    banner "=== Performance Statistics ==="
    
    # Query response time test
    if command -v dig &>/dev/null; then
        local response_time=$(dig @{{ ansible_default_ipv4.address }} localhost +stats 2>/dev/null | grep "Query time:" | awk '{print $4}' || echo "999")
        echo "DNS Response Time: ${response_time}ms"
    fi
    
    # Cache statistics (if available via API)
    local cache_stats=$(api_call "servers/localhost/statistics" | jq -r '.[] | select(.name | contains("cache")) | "\(.name): \(.value)"' 2>/dev/null || echo "")
    if [[ -n "$cache_stats" ]]; then
        echo ""
        echo "Cache Statistics:"
        echo "$cache_stats"
    fi
    
    # Database performance
    local db_queries=$(mysql_query "SHOW GLOBAL STATUS LIKE 'Questions';" | awk '{print $2}' || echo "0")
    local db_uptime=$(mysql_query "SHOW GLOBAL STATUS LIKE 'Uptime';" | awk '{print $2}' || echo "1")
    if [[ "$db_uptime" -gt 0 ]]; then
        local qps=$((db_queries / db_uptime))
        echo "Database Queries/Second: $qps"
    fi
    echo ""
}

# Get recent errors
get_recent_errors() {
    banner "=== Recent Errors ==="
    
    # Check systemd journal for errors
    local error_count=$(journalctl -u pdns --since "1 hour ago" --no-pager -q | grep -i error | wc -l 2>/dev/null || echo "0")
    
    if [[ "$error_count" -eq 0 ]]; then
        success "No recent errors found in service logs"
    else
        warning "Found $error_count error(s) in the last hour"
        echo ""
        echo "Recent errors:"
        journalctl -u pdns --since "1 hour ago" --no-pager -q | grep -i error | tail -5 2>/dev/null || echo "Unable to retrieve error details"
    fi
    echo ""
}

# Get zone health
get_zone_health() {
    banner "=== Zone Health Check ==="
    
    # Check for zones without SOA records
    local zones_without_soa=$(mysql_query "
        SELECT d.name 
        FROM domains d 
        LEFT JOIN records r ON d.id = r.domain_id AND r.type = 'SOA' 
        WHERE r.id IS NULL AND d.type = 'NATIVE';
    " | wc -l || echo "0")
    
    if [[ "$zones_without_soa" -eq 0 ]]; then
        success "All native zones have SOA records"
    else
        warning "$zones_without_soa zone(s) missing SOA records"
    fi
    
    # Check for zones without NS records
    local zones_without_ns=$(mysql_query "
        SELECT d.name 
        FROM domains d 
        LEFT JOIN records r ON d.id = r.domain_id AND r.type = 'NS' 
        WHERE r.id IS NULL AND d.type = 'NATIVE';
    " | wc -l || echo "0")
    
    if [[ "$zones_without_ns" -eq 0 ]]; then
        success "All native zones have NS records"
    else
        warning "$zones_without_ns zone(s) missing NS records"
    fi
    
    # Check slave zone freshness
    if [[ "{{ server_role }}" == "secondary" ]]; then
        local stale_slaves=$(mysql_query "
            SELECT COUNT(*) 
            FROM domains 
            WHERE type = 'SLAVE' AND (last_check IS NULL OR last_check < UNIX_TIMESTAMP() - 7200);
        " || echo "0")
        
        if [[ "$stale_slaves" -eq 0 ]]; then
            success "All slave zones are up to date"
        else
            warning "$stale_slaves slave zone(s) may be stale"
        fi
    fi
    echo ""
}

# Main execution
show_usage() {
    cat << EOF
PowerDNS Statistics Tool

Usage: $0 [option]

Options:
    --all           Show all statistics (default)
    --system        Show system statistics
    --service       Show service statistics
    --database      Show database statistics
    --api           Show API statistics
    --network       Show network statistics
    --performance   Show performance statistics
    --errors        Show recent errors
    --zones         Show zone health
    --help          Show this help

Examples:
    $0                  # Show all statistics
    $0 --performance    # Show only performance stats
    $0 --errors         # Show only recent errors

EOF
}

# Parse command line arguments
case "${1:---all}" in
    "--system")
        get_system_stats
        ;;
    "--service")
        get_service_stats
        ;;
    "--database")
        get_database_stats
        ;;
    "--api")
        get_api_stats
        ;;
    "--network")
        get_network_stats
        ;;
    "--performance")
        get_performance_stats
        ;;
    "--errors")
        get_recent_errors
        ;;
    "--zones")
        get_zone_health
        ;;
    "--all"|"")
        get_system_stats
        get_service_stats
        get_database_stats
        get_api_stats
        get_network_stats
        get_performance_stats
        get_recent_errors
        get_zone_health
        ;;
    "--help"|"-h")
        show_usage
        ;;
    *)
        error "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac
