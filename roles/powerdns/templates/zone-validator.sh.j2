#!/bin/bash
# PowerDNS Zone Validation Script
# Generated by Ansible

set -euo pipefail

ZONE="$1"
TEMP_ZONE_FILE="/tmp/${ZONE}.zone"
LOG_FILE="/var/log/powerdns/zone-validation.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Export zone to temporary file for validation
export_zone() {
    local zone=$1
    if ! pdnsutil list-zone "$zone" > "$TEMP_ZONE_FILE" 2>/dev/null; then
        log_message "ERROR: Failed to export zone $zone"
        return 1
    fi
    return 0
}

# Validate zone syntax using named-checkzone
validate_zone_syntax() {
    local zone=$1
    local zone_file=$2
    
    if command -v named-checkzone >/dev/null 2>&1; then
        if named-checkzone "$zone" "$zone_file" >/dev/null 2>&1; then
            print_color $GREEN "✓ Zone syntax validation: PASSED"
            log_message "Zone $zone syntax validation: PASSED"
            return 0
        else
            print_color $RED "✗ Zone syntax validation: FAILED"
            log_message "Zone $zone syntax validation: FAILED"
            named-checkzone "$zone" "$zone_file" 2>&1 | tee -a "$LOG_FILE"
            return 1
        fi
    else
        print_color $YELLOW "⚠ named-checkzone not available, skipping syntax validation"
        return 0
    fi
}

# Validate DNSSEC if enabled
validate_dnssec() {
    local zone=$1
    
    if pdnsutil show-zone "$zone" | grep -q "Secured: 1"; then
        print_color $GREEN "✓ DNSSEC: ENABLED"
        log_message "Zone $zone DNSSEC: ENABLED"
        
        # Check for valid keys
        local key_count=$(pdnsutil list-keys "$zone" | wc -l)
        if [ "$key_count" -gt 0 ]; then
            print_color $GREEN "✓ DNSSEC Keys: $key_count keys found"
            log_message "Zone $zone DNSSEC keys: $key_count keys found"
        else
            print_color $RED "✗ DNSSEC Keys: No keys found"
            log_message "Zone $zone DNSSEC keys: No keys found"
            return 1
        fi
    else
        print_color $YELLOW "⚠ DNSSEC: DISABLED"
        log_message "Zone $zone DNSSEC: DISABLED"
    fi
    return 0
}

# Validate SOA record
validate_soa() {
    local zone=$1
    
    if dig @{{ ansible_default_ipv4.address }} "$zone" SOA +short | grep -q .; then
        print_color $GREEN "✓ SOA Record: PRESENT"
        log_message "Zone $zone SOA record: PRESENT"
        return 0
    else
        print_color $RED "✗ SOA Record: MISSING"
        log_message "Zone $zone SOA record: MISSING"
        return 1
    fi
}

# Validate NS records
validate_ns() {
    local zone=$1
    
    local ns_count=$(dig @{{ ansible_default_ipv4.address }} "$zone" NS +short | wc -l)
    if [ "$ns_count" -gt 0 ]; then
        print_color $GREEN "✓ NS Records: $ns_count records found"
        log_message "Zone $zone NS records: $ns_count records found"
        return 0
    else
        print_color $RED "✗ NS Records: MISSING"
        log_message "Zone $zone NS records: MISSING"
        return 1
    fi
}

# Validate zone transfer capability
validate_zone_transfer() {
    local zone=$1
    
    if dig @{{ ansible_default_ipv4.address }} "$zone" AXFR | grep -q "XFR size"; then
        print_color $GREEN "✓ Zone Transfer: WORKING"
        log_message "Zone $zone transfer: WORKING"
        return 0
    else
        print_color $YELLOW "⚠ Zone Transfer: LIMITED/DISABLED"
        log_message "Zone $zone transfer: LIMITED/DISABLED"
        return 0  # Not necessarily an error
    fi
}

# Main validation function
main() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <zone_name>"
        exit 1
    fi
    
    local zone=$1
    local validation_failed=0
    
    print_color $YELLOW "=== Validating Zone: $zone ==="
    log_message "Starting validation for zone: $zone"
    
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Export zone for validation
    if ! export_zone "$zone"; then
        print_color $RED "✗ Zone export failed"
        exit 1
    fi
    
    # Run validations
    validate_zone_syntax "$zone" "$TEMP_ZONE_FILE" || validation_failed=1
    validate_dnssec "$zone" || validation_failed=1
    validate_soa "$zone" || validation_failed=1
    validate_ns "$zone" || validation_failed=1
    validate_zone_transfer "$zone" || validation_failed=1
    
    # Cleanup
    rm -f "$TEMP_ZONE_FILE"
    
    # Final result
    if [ $validation_failed -eq 0 ]; then
        print_color $GREEN "=== Zone Validation: PASSED ==="
        log_message "Zone $zone validation: PASSED"
        exit 0
    else
        print_color $RED "=== Zone Validation: FAILED ==="
        log_message "Zone $zone validation: FAILED"
        exit 1
    fi
}

# Run main function
main "$@"
