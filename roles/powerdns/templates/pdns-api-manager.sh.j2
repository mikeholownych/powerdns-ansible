#!/bin/bash
# PowerDNS API Management Script
# Generated by Ansible

set -euo pipefail

# Configuration
API_URL="http://{{ ansible_default_ipv4.address }}:{{ powerdns_webserver_port | default(8081) }}/api/v1"
API_KEY="{{ powerdns_api_key }}"
CONTENT_TYPE="application/json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Make API request
api_request() {
    local method=$1
    local endpoint=$2
    local data=${3:-""}
    
    local curl_args=(-s -X "$method" -H "X-API-Key: $API_KEY" -H "Content-Type: $CONTENT_TYPE")
    
    if [ -n "$data" ]; then
        curl_args+=(-d "$data")
    fi
    
    curl "${curl_args[@]}" "$API_URL$endpoint"
}

# Get server information
get_server_info() {
    print_color $BLUE "=== PowerDNS Server Information ==="
    local response=$(api_request GET "/servers/localhost")
    
    if [ $? -eq 0 ]; then
        echo "$response" | python3 -m json.tool 2>/dev/null || echo "$response"
        print_color $GREEN "✓ Server info retrieved successfully"
    else
        print_color $RED "✗ Failed to retrieve server info"
        return 1
    fi
}

# List all zones
list_zones() {
    print_color $BLUE "=== PowerDNS Zones ==="
    local response=$(api_request GET "/servers/localhost/zones")
    
    if [ $? -eq 0 ]; then
        echo "$response" | python3 -c "
import json, sys
try:
    zones = json.load(sys.stdin)
    for zone in zones:
        print(f\"Zone: {zone['name']:<30} Type: {zone['kind']:<10} Serial: {zone.get('serial', 'N/A')}\")
except:
    print('Failed to parse zones')
"
        print_color $GREEN "✓ Zones listed successfully"
    else
        print_color $RED "✗ Failed to list zones"
        return 1
    fi
}

# Get zone details
get_zone() {
    local zone_name=$1
    if [ -z "$zone_name" ]; then
        print_color $RED "Usage: $0 get-zone <zone_name>"
        return 1
    fi
    
    print_color $BLUE "=== Zone Details: $zone_name ==="
    local response=$(api_request GET "/servers/localhost/zones/$zone_name")
    
    if [ $? -eq 0 ]; then
        echo "$response" | python3 -m json.tool 2>/dev/null || echo "$response"
        print_color $GREEN "✓ Zone details retrieved successfully"
    else
        print_color $RED "✗ Failed to retrieve zone details"
        return 1
    fi
}

# Create a new zone
create_zone() {
    local zone_name=$1
    local zone_type=${2:-"Zone"}
    
    if [ -z "$zone_name" ]; then
        print_color $RED "Usage: $0 create-zone <zone_name> [zone_type]"
        return 1
    fi
    
    print_color $BLUE "=== Creating Zone: $zone_name ==="
    
    local zone_data=$(cat <<EOF
{
    "name": "$zone_name",
    "kind": "$zone_type",
    "nameservers": ["ns1.$zone_name", "ns2.$zone_name"],
    "rrsets": [
        {
            "name": "$zone_name",
            "type": "SOA",
            "records": [
                {
                    "content": "ns1.$zone_name admin.$zone_name $(date +%s) 3600 1800 604800 86400",
                    "disabled": false
                }
            ]
        },
        {
            "name": "$zone_name",
            "type": "NS",
            "records": [
                {"content": "ns1.$zone_name", "disabled": false},
                {"content": "ns2.$zone_name", "disabled": false}
            ]
        }
    ]
}
EOF
)
    
    local response=$(api_request POST "/servers/localhost/zones" "$zone_data")
    
    if [ $? -eq 0 ]; then
        print_color $GREEN "✓ Zone created successfully"
        echo "$response" | python3 -m json.tool 2>/dev/null || echo "$response"
    else
        print_color $RED "✗ Failed to create zone"
        echo "$response"
        return 1
    fi
}

# Add a record to a zone
add_record() {
    local zone_name=$1
    local record_name=$2
    local record_type=$3
    local record_content=$4
    local ttl=${5:-3600}
    
    if [ -z "$zone_name" ] || [ -z "$record_name" ] || [ -z "$record_type" ] || [ -z "$record_content" ]; then
        print_color $RED "Usage: $0 add-record <zone_name> <record_name> <record_type> <record_content> [ttl]"
        return 1
    fi
    
    print_color $BLUE "=== Adding Record: $record_name.$zone_name ==="
    
    local record_data=$(cat <<EOF
{
    "rrsets": [
        {
            "name": "$record_name",
            "type": "$record_type",
            "changetype": "REPLACE",
            "records": [
                {
                    "content": "$record_content",
                    "disabled": false
                }
            ],
            "ttl": $ttl
        }
    ]
}
EOF
)
    
    local response=$(api_request PATCH "/servers/localhost/zones/$zone_name" "$record_data")
    
    if [ $? -eq 0 ]; then
        print_color $GREEN "✓ Record added successfully"
    else
        print_color $RED "✗ Failed to add record"
        echo "$response"
        return 1
    fi
}

# Delete a record from a zone
delete_record() {
    local zone_name=$1
    local record_name=$2
    local record_type=$3
    
    if [ -z "$zone_name" ] || [ -z "$record_name" ] || [ -z "$record_type" ]; then
        print_color $RED "Usage: $0 delete-record <zone_name> <record_name> <record_type>"
        return 1
    fi
    
    print_color $BLUE "=== Deleting Record: $record_name.$zone_name ==="
    
    local record_data=$(cat <<EOF
{
    "rrsets": [
        {
            "name": "$record_name",
            "type": "$record_type",
            "changetype": "DELETE"
        }
    ]
}
EOF
)
    
    local response=$(api_request PATCH "/servers/localhost/zones/$zone_name" "$record_data")
    
    if [ $? -eq 0 ]; then
        print_color $GREEN "✓ Record deleted successfully"
    else
        print_color $RED "✗ Failed to delete record"
        echo "$response"
        return 1
    fi
}

# Get statistics
get_statistics() {
    print_color $BLUE "=== PowerDNS Statistics ==="
    local response=$(api_request GET "/servers/localhost/statistics")
    
    if [ $? -eq 0 ]; then
        echo "$response" | python3 -c "
import json, sys
try:
    stats = json.load(sys.stdin)
    for stat in stats:
        print(f\"{stat['name']:<40} {stat['value']}\")
except:
    print('Failed to parse statistics')
"
        print_color $GREEN "✓ Statistics retrieved successfully"
    else
        print_color $RED "✗ Failed to retrieve statistics"
        return 1
    fi
}

# Flush cache
flush_cache() {
    local domain=${1:-""}
    
    print_color $BLUE "=== Flushing Cache ==="
    
    local endpoint="/servers/localhost/cache/flush"
    if [ -n "$domain" ]; then
        endpoint="$endpoint?domain=$domain"
    fi
    
    local response=$(api_request PUT "$endpoint")
    
    if [ $? -eq 0 ]; then
        print_color $GREEN "✓ Cache flushed successfully"
        echo "$response"
    else
        print_color $RED "✗ Failed to flush cache"
        return 1
    fi
}

# Show help
show_help() {
    cat << EOF
PowerDNS API Management Script

Usage: $0 <command> [arguments]

Commands:
    server-info                     Show server information
    list-zones                      List all zones
    get-zone <zone_name>           Get zone details
    create-zone <zone_name> [type] Create a new zone
    add-record <zone> <name> <type> <content> [ttl]
                                   Add a record to a zone
    delete-record <zone> <name> <type>
                                   Delete a record from a zone
    statistics                      Show server statistics
    flush-cache [domain]           Flush cache (optionally for specific domain)
    help                           Show this help message

Examples:
    $0 server-info
    $0 list-zones
    $0 get-zone example.com
    $0 create-zone test.com
    $0 add-record example.com www A 192.168.1.100
    $0 delete-record example.com www A
    $0 statistics
    $0 flush-cache example.com

EOF
}

# Main function
main() {
    case "${1:-help}" in
        "server-info")
            get_server_info
            ;;
        "list-zones")
            list_zones
            ;;
        "get-zone")
            get_zone "$2"
            ;;
        "create-zone")
            create_zone "$2" "${3:-Zone}"
            ;;
        "add-record")
            add_record "$2" "$3" "$4" "$5" "${6:-3600}"
            ;;
        "delete-record")
            delete_record "$2" "$3" "$4"
            ;;
        "statistics")
            get_statistics
            ;;
        "flush-cache")
            flush_cache "${2:-}"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_color $RED "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Check if API is accessible
if ! curl -s -f -H "X-API-Key: $API_KEY" "$API_URL/servers" >/dev/null; then
    print_color $RED "✗ PowerDNS API is not accessible at $API_URL"
    print_color $YELLOW "Please check:"
    print_color $YELLOW "  - PowerDNS service is running"
    print_color $YELLOW "  - API is enabled in configuration"
    print_color $YELLOW "  - API key is correct"
    print_color $YELLOW "  - Firewall allows access to port {{ powerdns_webserver_port | default(8081) }}"
    exit 1
fi

# Run main function with all arguments
main "$@"
