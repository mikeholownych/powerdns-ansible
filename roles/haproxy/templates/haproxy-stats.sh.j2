#!/bin/bash
# HAProxy Statistics and Management Script
# Generated by Ansible

set -euo pipefail

# Configuration
HAPROXY_STATS_URL="http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}{{ haproxy_stats_uri | default('/stats') }}"
HAPROXY_STATS_USER="{{ haproxy_stats_user | default('admin') }}"
HAPROXY_STATS_PASS="{{ haproxy_stats_password | default('admin123') }}"
HAPROXY_SOCKET="/run/haproxy/admin.sock"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Check if HAProxy is running
check_haproxy_status() {
    if systemctl is-active --quiet haproxy; then
        print_color $GREEN "✓ HAProxy service is running"
        return 0
    else
        print_color $RED "✗ HAProxy service is not running"
        return 1
    fi
}

# Get HAProxy statistics
get_haproxy_stats() {
    print_color $BLUE "=== HAProxy Statistics ==="
    
    if command -v socat >/dev/null 2>&1 && [ -S "$HAPROXY_SOCKET" ]; then
        # Use socket for detailed stats
        print_color $YELLOW "Backend Status:"
        echo "show stat" | socat stdio "$HAPROXY_SOCKET" | grep -E "(dns_|mysql_|powerdns_)" | \
        while IFS=',' read -r pxname svname qcur qmax scur smax slim stot bin bout dreq dresp ereq econ eresp wretr wredis status weight act bck chkfail chkdown lastchg downtime qlimit pid iid sid throttle lbtot tracked type rate rate_lim rate_max check_status check_code check_duration hrsp_1xx hrsp_2xx hrsp_3xx hrsp_4xx hrsp_5xx hrsp_other hanafail req_rate req_rate_max req_tot cli_abrt srv_abrt comp_in comp_out comp_byp comp_rsp lastsess last_chk last_agt qtime ctime rtime ttime; do
            if [ "$svname" != "BACKEND" ] && [ "$svname" != "FRONTEND" ]; then
                case $status in
                    "UP") status_color=$GREEN ;;
                    "DOWN") status_color=$RED ;;
                    "MAINT") status_color=$YELLOW ;;
                    *) status_color=$NC ;;
                esac
                printf "  %-20s %-15s ${status_color}%-8s${NC} %s\n" "$pxname" "$svname" "$status" "$check_status"
            fi
        done
        
        print_color $YELLOW "Connection Statistics:"
        echo "show info" | socat stdio "$HAPROXY_SOCKET" | grep -E "(CurrConns|CumConns|CumReq)"
        
    else
        print_color $YELLOW "Using HTTP stats (install socat for detailed stats)"
        if command -v curl >/dev/null 2>&1; then
            curl -s -u "$HAPROXY_STATS_USER:$HAPROXY_STATS_PASS" "$HAPROXY_STATS_URL;csv" | \
            grep -E "(dns_|mysql_|powerdns_)" | head -10
        else
            print_color $RED "curl not available for HTTP stats"
        fi
    fi
}

# Show backend health
show_backend_health() {
    print_color $BLUE "=== Backend Health Status ==="
    
    # Check DNS backends
    print_color $YELLOW "DNS Servers:"
{% for host in groups['powerdns_servers'] %}
    if dig @{{ hostvars[host]['ansible_default_ipv4']['address'] }} +time=2 +tries=1 localhost >/dev/null 2>&1; then
        print_color $GREEN "  ✓ {{ hostvars[host]['inventory_hostname'] }} ({{ hostvars[host]['ansible_default_ipv4']['address'] }})"
    else
        print_color $RED "  ✗ {{ hostvars[host]['inventory_hostname'] }} ({{ hostvars[host]['ansible_default_ipv4']['address'] }})"
    fi
{% endfor %}

{% if haproxy_mysql_enabled | default(true) %}
    # Check MySQL backends
    print_color $YELLOW "MySQL Servers:"
{% for host in groups['powerdns_servers'] %}
    if nc -z -w2 {{ hostvars[host]['ansible_default_ipv4']['address'] }} 3306 2>/dev/null; then
        print_color $GREEN "  ✓ {{ hostvars[host]['inventory_hostname'] }} ({{ hostvars[host]['ansible_default_ipv4']['address'] }}:3306)"
    else
        print_color $RED "  ✗ {{ hostvars[host]['inventory_hostname'] }} ({{ hostvars[host]['ansible_default_ipv4']['address'] }}:3306)"
    fi
{% endfor %}
{% endif %}

{% if haproxy_api_enabled | default(true) %}
    # Check PowerDNS API backends
    print_color $YELLOW "PowerDNS API Servers:"
{% for host in groups['powerdns_servers'] %}
    if curl -s -f -m 5 "http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ powerdns_webserver_port | default(8081) }}/api/v1/servers" >/dev/null 2>&1; then
        print_color $GREEN "  ✓ {{ hostvars[host]['inventory_hostname'] }} API ({{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ powerdns_webserver_port | default(8081) }})"
    else
        print_color $RED "  ✗ {{ hostvars[host]['inventory_hostname'] }} API ({{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ powerdns_webserver_port | default(8081) }})"
    fi
{% endfor %}
{% endif %}
}

# Test load balancing
test_load_balancing() {
    print_color $BLUE "=== Load Balancing Test ==="
    
    print_color $YELLOW "Testing DNS load balancing:"
    for i in {1..5}; do
        if dig @{{ ansible_default_ipv4.address }} +short +time=2 localhost >/dev/null 2>&1; then
            print_color $GREEN "  Test $i: SUCCESS"
        else
            print_color $RED "  Test $i: FAILED"
        fi
        sleep 1
    done
}

# Enable/disable backend server
manage_server() {
    local action=$1
    local backend=$2
    local server=$3
    
    if [ -S "$HAPROXY_SOCKET" ] && command -v socat >/dev/null 2>&1; then
        case $action in
            "enable")
                echo "enable server $backend/$server" | socat stdio "$HAPROXY_SOCKET"
                print_color $GREEN "Enabled server $server in backend $backend"
                ;;
            "disable")
                echo "disable server $backend/$server" | socat stdio "$HAPROXY_SOCKET"
                print_color $YELLOW "Disabled server $server in backend $backend"
                ;;
            *)
                print_color $RED "Invalid action. Use 'enable' or 'disable'"
                return 1
                ;;
        esac
    else
        print_color $RED "HAProxy socket not available or socat not installed"
        return 1
    fi
}

# Show help
show_help() {
    cat << EOF
HAProxy Management Script

Usage: $0 [COMMAND] [OPTIONS]

Commands:
    status          Show HAProxy service status
    stats           Show HAProxy statistics
    health          Show backend health status
    test            Test load balancing functionality
    enable          Enable a backend server
    disable         Disable a backend server
    help            Show this help message

Examples:
    $0 status
    $0 stats
    $0 health
    $0 test
    $0 enable dns_udp_backend ns1.holownych.com
    $0 disable dns_udp_backend ns2.holownych.com

EOF
}

# Main function
main() {
    case "${1:-status}" in
        "status")
            check_haproxy_status
            ;;
        "stats")
            check_haproxy_status && get_haproxy_stats
            ;;
        "health")
            show_backend_health
            ;;
        "test")
            test_load_balancing
            ;;
        "enable")
            if [ $# -eq 3 ]; then
                manage_server "enable" "$2" "$3"
            else
                print_color $RED "Usage: $0 enable <backend> <server>"
                exit 1
            fi
            ;;
        "disable")
            if [ $# -eq 3 ]; then
                manage_server "disable" "$2" "$3"
            else
                print_color $RED "Usage: $0 disable <backend> <server>"
                exit 1
            fi
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_color $RED "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
