-- DNSdist Configuration
-- Generated by Ansible on {{ ansible_date_time.iso8601 }}

-- Server identification
setServerPolicy(leastOutstanding)
setMaxTCPClientThreads(10)
setMaxTCPQueuedConnections(100)

-- Console and Web Interface
controlSocket('127.0.0.1:{{ dnsdist_console_port | default(5199) }}')
setConsoleConnectionsLogging(true)

{% if dnsdist_webserver_enabled | default(true) %}
webserver('{{ ansible_default_ipv4.address }}:{{ dnsdist_webserver_port | default(8083) }}')
setWebserverConfig({password='{{ dnsdist_webserver_password | default("admin123") }}', apiKey='{{ dnsdist_api_key | default("dnsdist-api-key") }}'})
{% endif %}

-- Bind to interfaces
addLocal('{{ ansible_default_ipv4.address }}:{{ dnsdist_port | default(53) }}')
{% if dnsdist_bind_ipv6 | default(false) %}
addLocal('[::]:{{ dnsdist_port | default(53) }}')
{% endif %}

-- Backend PowerDNS Authoritative Servers
{% for host in groups['powerdns_primary'] | default([]) %}
newServer({
    address='{{ hostvars[host]['ansible_default_ipv4']['address'] }}:53',
    name='auth-primary-{{ loop.index }}',
    pool='auth',
    checkName='{{ primary_domains[0] | default("example.com") }}',
    checkType='SOA',
    checkInterval=30,
    rise=2,
    maxCheckFailures=3,
    mustResolve=true,
    weight=10
})
{% endfor %}

{% for host in groups['powerdns_secondary'] | default([]) %}
newServer({
    address='{{ hostvars[host]['ansible_default_ipv4']['address'] }}:53',
    name='auth-secondary-{{ loop.index }}',
    pool='auth',
    checkName='{{ primary_domains[0] | default("example.com") }}',
    checkType='SOA',
    checkInterval=30,
    rise=2,
    maxCheckFailures=3,
    mustResolve=true,
    weight=5
})
{% endfor %}

-- Backend PowerDNS Recursor Servers
{% for host in groups['powerdns_recursor'] | default([]) %}
newServer({
    address='{{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ recursor_port | default(5353) }}',
    name='recursor-{{ loop.index }}',
    pool='recursor',
    checkName='google.com',
    checkType='A',
    checkInterval=15,
    rise=2,
    maxCheckFailures=3,
    mustResolve=true,
    weight=10
})
{% endfor %}

-- Server Policies and Load Balancing
setServerPolicyLua('leastOutstanding')

-- Custom load balancing function with latency awareness
function latencyAwarePolicy(servers, dq)
    local best = nil
    local bestLatency = math.huge
    
    for _, server in ipairs(servers) do
        if server:isUp() then
            local latency = server:getLatency()
            local outstanding = server:getOutstanding()
            local score = latency + (outstanding * 10)  -- Weight outstanding queries
            
            if score < bestLatency then
                bestLatency = score
                best = server
            end
        end
    end
    
    return best
end

-- Apply custom policy
setServerPolicyLua(latencyAwarePolicy)

-- Pool-based routing
addPoolRule('{{ primary_domains | join("|") }}', 'auth')
{% for domain in primary_domains | default([]) %}
addPoolRule('{{ domain }}', 'auth')
{% endfor %}

-- Reverse DNS zones to authoritative
{% for zone in reverse_zones | default([]) %}
addPoolRule('{{ zone }}', 'auth')
{% endfor %}

-- Everything else to recursors
addPoolRule(AllRule(), 'recursor')

-- Rate Limiting and DDoS Protection
addAction(MaxQPSIPRule({{ dnsdist_max_qps_per_ip | default(50) }}), DropAction())
addAction(MaxQPSRule({{ dnsdist_max_qps_total | default(10000) }}), DropAction())

-- Block suspicious queries
addAction(RegexRule('.*\\.onion$'), DropAction())
addAction(RegexRule('.*\\.exit$'), DropAction())

-- Cache configuration
pc = newPacketCache({{ dnsdist_cache_size | default(100000) }}, {
    maxTTL={{ dnsdist_cache_max_ttl | default(86400) }},
    minTTL={{ dnsdist_cache_min_ttl | default(60) }},
    temporaryFailureTTL={{ dnsdist_cache_failure_ttl | default(60) }},
    staleTTL={{ dnsdist_cache_stale_ttl | default(60) }},
    dontAge=false,
    numberOfShards={{ dnsdist_cache_shards | default(20) }},
    deferrableInsertLock=true,
    maxNegativeTTL={{ dnsdist_cache_negative_ttl | default(3600) }},
    parseECS=false
})
getPool(''):setCache(pc)

-- Logging configuration
addAction(AllRule(), LogAction('/var/log/dnsdist/queries.log', false, true, true, false, true))

-- Health check function
function healthCheck()
    local authServers = getPoolServers('auth')
    local recursorServers = getPoolServers('recursor')
    
    infolog('Auth servers: ' .. #authServers .. ' available')
    infolog('Recursor servers: ' .. #recursorServers .. ' available')
    
    -- Alert if no servers available
    if #authServers == 0 then
        errlog('CRITICAL: No authoritative servers available!')
    end
    
    if #recursorServers == 0 then
        errlog('CRITICAL: No recursor servers available!')
    end
end

-- Schedule health checks
addPeriodicLuaAction(30, healthCheck)

-- Prometheus metrics
{% if prometheus_enabled | default(false) %}
webserver('{{ ansible_default_ipv4.address }}:{{ dnsdist_prometheus_port | default(9199) }}', '{{ dnsdist_prometheus_password | default("prometheus") }}', '{{ dnsdist_prometheus_api_key | default("prometheus-key") }}', {}, '0.0.0.0/0')
{% endif %}

-- Custom rules for enterprise features
{% if dnsdist_custom_rules | default([]) %}
{% for rule in dnsdist_custom_rules %}
-- {{ rule.description | default("Custom rule") }}
{{ rule.lua_code }}
{% endfor %}
{% endif %}

-- GeoDNS support (if enabled)
{% if dnsdist_geodns_enabled | default(false) %}
geoip = newGeoIPBackend('{{ dnsdist_geodns_database_path | default("/usr/share/GeoIP/GeoLite2-Country.mmdb") }}')

function geoPolicy(servers, dq)
    local country = geoip:lookupCountry(dq.remoteaddr)
    
    -- Route based on country
    {% for geo_rule in dnsdist_geodns_rules | default([]) %}
    if country == '{{ geo_rule.country }}' then
        return getPoolServers('{{ geo_rule.pool }}')[1]
    end
    {% endfor %}
    
    -- Default routing
    return leastOutstanding(servers, dq)
end

setServerPolicyLua(geoPolicy)
{% endif %}

-- EDNS Client Subnet support
setECSOverride(false)
setECSSourcePrefixV4({{ dnsdist_ecs_prefix_v4 | default(24) }})
setECSSourcePrefixV6({{ dnsdist_ecs_prefix_v6 | default(56) }})

-- Security features
setSecurityPollSuffix('')
setSecurityPollInterval(0)

-- Performance tuning
setMaxTCPConnectionsPerClient({{ dnsdist_max_tcp_per_client | default(10) }})
setMaxTCPQueriesPerConnection({{ dnsdist_max_queries_per_tcp | default(100) }})
setTCPRecvTimeout({{ dnsdist_tcp_recv_timeout | default(2) }})
setTCPSendTimeout({{ dnsdist_tcp_send_timeout | default(2) }})

-- UDP timeout
setUDPTimeout({{ dnsdist_udp_timeout | default(2) }})

-- Console access control
setConsoleACL({'127.0.0.1/8', '::1/128'})

-- Statistics and monitoring
function showStats()
    local stats = {}
    stats['queries'] = getStatisticsCounters()['queries']
    stats['responses'] = getStatisticsCounters()['responses']
    stats['cache-hits'] = getStatisticsCounters()['cache-hits']
    stats['cache-misses'] = getStatisticsCounters()['cache-misses']
    
    for name, value in pairs(stats) do
        infolog(name .. ': ' .. tostring(value))
    end
end

-- Log statistics every 5 minutes
addPeriodicLuaAction(300, showStats)

-- Emergency bypass (if all backends fail)
function emergencyBypass(dq)
    if #getPoolServers('auth') == 0 and #getPoolServers('recursor') == 0 then
        -- Return SERVFAIL
        return DNSAction.ServFail, ''
    end
    return DNSAction.None, ''
end

addAction(AllRule(), LuaAction(emergencyBypass))

infolog('DNSdist configuration loaded successfully')
